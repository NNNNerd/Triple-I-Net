2023-01-20 18:48:36,992 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.13 (default, Mar 29 2022, 02:18:16) [GCC 7.5.0]
CUDA available: True
GPU 0: GeForce RTX 3090
CUDA_HOME: /usr/local/cuda
NVCC: Build cuda_11.1.TC455_06.29190527_0
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~16.04) 7.5.0
PyTorch: 1.10.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0
OpenCV: 4.5.5
MMCV: 1.4.8
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.3
MMDetection: 2.23.0+3e26931
------------------------------------------------------------

2023-01-20 18:48:37,332 - mmdet - INFO - Distributed training: False
2023-01-20 18:48:38,395 - mmdet - INFO - Config:
model = dict(
    type='TINet',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    igfw=dict(downsample_size=(64, 64), alpha='learnable'),
    inter=2,
    intra=2,
    weighted_loss=1,
    w=dict(i=0.5, m=0.5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 1.5],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=4,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=-1,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.5,
                neg_iou_thr=0.5,
                min_pos_iou=0.5,
                match_low_quality=False,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            pos_weight=-1,
            debug=False)),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100)))
dataset_type = 'FLIRA'
data_root = '/home/zhangyan22/data/FLIR_aligned/'
img_norm_cfg = dict(
    mean_list=([160.915, 163.213, 161.171], [136.095, 136.095, 136.095]),
    std_list=([56.314, 59.272, 63.472], [66.367, 66.367, 66.367]),
    to_rgb=True)
train_pipeline = [
    dict(
        type='LoadImagePairFromFile',
        spectrals=('visible', 'thermal'),
        daynight=True),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(640, 512), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='MultiNormalize',
        mean_list=([160.915, 163.213, 161.171], [136.095, 136.095, 136.095]),
        std_list=([56.314, 59.272, 63.472], [66.367, 66.367, 66.367]),
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(
        type='Collect',
        keys=['img', 'gt_bboxes', 'gt_labels'],
        meta_keys=('filename', 'ori_filename', 'ori_shape', 'img_shape',
                   'pad_shape', 'scale_factor', 'flip', 'flip_direction',
                   'img_norm_cfg', 'dn_labels'))
]
test_pipeline = [
    dict(type='LoadImagePairFromFile', spectrals=('visible', 'thermal')),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(640, 512),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='MultiNormalize',
                mean_list=([160.915, 163.213,
                            161.171], [136.095, 136.095, 136.095]),
                std_list=([56.314, 59.272, 63.472], [66.367, 66.367, 66.367]),
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=2,
    train=dict(
        type='FLIRA',
        ann_file='/home/zhangyan22/data/FLIR_aligned/FLIR_train.json',
        img_prefix='/home/zhangyan22/data/FLIR_aligned/train/',
        pipeline=[
            dict(
                type='LoadImagePairFromFile',
                spectrals=('visible', 'thermal'),
                daynight=True),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(640, 512), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='MultiNormalize',
                mean_list=([160.915, 163.213,
                            161.171], [136.095, 136.095, 136.095]),
                std_list=([56.314, 59.272, 63.472], [66.367, 66.367, 66.367]),
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(
                type='Collect',
                keys=['img', 'gt_bboxes', 'gt_labels'],
                meta_keys=('filename', 'ori_filename', 'ori_shape',
                           'img_shape', 'pad_shape', 'scale_factor', 'flip',
                           'flip_direction', 'img_norm_cfg', 'dn_labels'))
        ]),
    val=dict(
        type='FLIRA',
        ann_file='/home/zhangyan22/data/FLIR_aligned/FLIR_test.json',
        img_prefix='/home/zhangyan22/data/FLIR_aligned/val/',
        pipeline=[
            dict(
                type='LoadImagePairFromFile',
                spectrals=('visible', 'thermal')),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(640, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='MultiNormalize',
                        mean_list=([160.915, 163.213,
                                    161.171], [136.095, 136.095, 136.095]),
                        std_list=([56.314, 59.272,
                                   63.472], [66.367, 66.367, 66.367]),
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='DefaultFormatBundle'),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='FLIRA',
        ann_file='/home/zhangyan22/data/FLIR_aligned/FLIR_test.json',
        img_prefix='/home/zhangyan22/data/FLIR_aligned/val/',
        pipeline=[
            dict(
                type='LoadImagePairFromFile',
                spectrals=('visible', 'thermal')),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(640, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='MultiNormalize',
                        mean_list=([160.915, 163.213,
                                    161.171], [136.095, 136.095, 136.095]),
                        std_list=([56.314, 59.272,
                                   63.472], [66.367, 66.367, 66.367]),
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='DefaultFormatBundle'),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=3, metric='bbox')
optimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=12)
checkpoint_config = dict(interval=3)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = 'work_dir/faster_rcnn_r50_fpn_tinet/flir2'
auto_resume = False
gpu_ids = [0]

2023-01-20 18:48:38,395 - mmdet - INFO - Set random seed to 581453038, deterministic: False
2023-01-20 18:48:39,033 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet50'}
2023-01-20 18:48:39,114 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet50'}
2023-01-20 18:48:39,188 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet50'}
2023-01-20 18:48:39,262 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2023-01-20 18:48:39,284 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2023-01-20 18:48:39,288 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone_v.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone_t.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

inter_ma1.fc.0.weight - torch.Size([16, 256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma1.fc.2.weight - torch.Size([256, 16]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma1.res_v.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma1.res_v.conv1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma1.res_v.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma1.res_v.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma1.res_v.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma1.res_v.conv2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma1.res_v.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma1.res_v.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma1.res_t.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma1.res_t.conv1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma1.res_t.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma1.res_t.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma1.res_t.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma1.res_t.conv2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma1.res_t.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma1.res_t.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma2.fc.0.weight - torch.Size([16, 256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma2.fc.2.weight - torch.Size([256, 16]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma2.res_v.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma2.res_v.conv1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma2.res_v.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma2.res_v.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma2.res_v.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma2.res_v.conv2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma2.res_v.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma2.res_v.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma2.res_t.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma2.res_t.conv1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma2.res_t.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma2.res_t.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma2.res_t.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma2.res_t.conv2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma2.res_t.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma2.res_t.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma3.fc.0.weight - torch.Size([16, 256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma3.fc.2.weight - torch.Size([256, 16]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma3.res_v.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma3.res_v.conv1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma3.res_v.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma3.res_v.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma3.res_v.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma3.res_v.conv2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma3.res_v.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma3.res_v.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma3.res_t.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma3.res_t.conv1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma3.res_t.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma3.res_t.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma3.res_t.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma3.res_t.conv2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma3.res_t.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma3.res_t.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma4.fc.0.weight - torch.Size([16, 256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma4.fc.2.weight - torch.Size([256, 16]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma4.res_v.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma4.res_v.conv1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma4.res_v.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma4.res_v.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma4.res_v.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma4.res_v.conv2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma4.res_v.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma4.res_v.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma4.res_t.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma4.res_t.conv1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma4.res_t.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma4.res_t.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma4.res_t.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma4.res_t.conv2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma4.res_t.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma4.res_t.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma5.fc.0.weight - torch.Size([16, 256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma5.fc.2.weight - torch.Size([256, 16]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma5.res_v.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma5.res_v.conv1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma5.res_v.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma5.res_v.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma5.res_v.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma5.res_v.conv2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma5.res_v.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma5.res_v.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma5.res_t.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma5.res_t.conv1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma5.res_t.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma5.res_t.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma5.res_t.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma5.res_t.conv2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma5.res_t.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

inter_ma5.res_t.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

intra_ma.predictor_v.conv.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of TINet  

intra_ma.predictor_v.conv.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of TINet  

intra_ma.predictor_t.conv.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of TINet  

intra_ma.predictor_t.conv.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of TINet  

igfw.alpha - torch.Size([]): 
The value is the same before and after calling `init_weights` of TINet  

igfw.conv_block.0.weight - torch.Size([64, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of TINet  

igfw.conv_block.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of TINet  

igfw.conv_block.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of TINet  

igfw.conv_block.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of TINet  

igfw.conv_block.4.weight - torch.Size([32, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of TINet  

igfw.conv_block.4.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of TINet  

igfw.conv_block.5.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of TINet  

igfw.conv_block.5.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of TINet  

igfw.fc_block.0.weight - torch.Size([128, 8192]): 
The value is the same before and after calling `init_weights` of TINet  

igfw.fc_block.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of TINet  

igfw.fc_block.1.weight - torch.Size([64, 128]): 
The value is the same before and after calling `init_weights` of TINet  

igfw.fc_block.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of TINet  

igfw.fc_block.2.weight - torch.Size([2, 64]): 
The value is the same before and after calling `init_weights` of TINet  

igfw.fc_block.2.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of TINet  

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of TINet  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([16, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2023-01-20 18:48:42,330 - mmdet - INFO - Start running, host: zhangyan22@microsoft, work_dir: /home/zhangyan22/mmdetection/work_dir/faster_rcnn_r50_fpn_tinet/flir2
2023-01-20 18:48:42,330 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-01-20 18:48:42,330 - mmdet - INFO - workflow: [('train', 1)], max: 12 epochs
2023-01-20 18:48:42,330 - mmdet - INFO - Checkpoints will be saved to /home/zhangyan22/mmdetection/work_dir/faster_rcnn_r50_fpn_tinet/flir2 by HardDiskBackend.
2023-01-20 18:49:01,186 - mmdet - INFO - Epoch [1][50/1286]	lr: 4.945e-04, eta: 1:36:38, time: 0.377, data_time: 0.049, memory: 5990, i_loss: 0.2603, mask_loss: 0.1835, loss_rpn_cls: 0.5846, loss_rpn_bbox: 0.1277, loss_cls: 0.3641, acc: 92.1592, loss_bbox: 0.0201, loss: 1.5403
2023-01-20 18:49:17,100 - mmdet - INFO - Epoch [1][100/1286]	lr: 9.940e-04, eta: 1:28:49, time: 0.318, data_time: 0.005, memory: 5991, i_loss: 0.1862, mask_loss: 0.0538, loss_rpn_cls: 0.2530, loss_rpn_bbox: 0.1123, loss_cls: 0.1833, acc: 96.1875, loss_bbox: 0.0980, loss: 0.8866
2023-01-20 18:49:32,744 - mmdet - INFO - Epoch [1][150/1286]	lr: 1.494e-03, eta: 1:25:35, time: 0.313, data_time: 0.005, memory: 5991, i_loss: 0.1816, mask_loss: 0.0334, loss_rpn_cls: 0.1344, loss_rpn_bbox: 0.0930, loss_cls: 0.2282, acc: 94.2334, loss_bbox: 0.1818, loss: 0.8524
2023-01-20 18:49:48,541 - mmdet - INFO - Epoch [1][200/1286]	lr: 1.993e-03, eta: 1:24:02, time: 0.316, data_time: 0.005, memory: 5992, i_loss: 0.1683, mask_loss: 0.0309, loss_rpn_cls: 0.1065, loss_rpn_bbox: 0.0875, loss_cls: 0.2901, acc: 91.2314, loss_bbox: 0.2933, loss: 0.9765
2023-01-20 18:50:04,464 - mmdet - INFO - Epoch [1][250/1286]	lr: 2.493e-03, eta: 1:23:07, time: 0.318, data_time: 0.005, memory: 5992, i_loss: 0.1665, mask_loss: 0.0289, loss_rpn_cls: 0.0860, loss_rpn_bbox: 0.0842, loss_cls: 0.2860, acc: 90.2490, loss_bbox: 0.3545, loss: 1.0060
2023-01-20 18:50:20,293 - mmdet - INFO - Epoch [1][300/1286]	lr: 2.992e-03, eta: 1:22:20, time: 0.317, data_time: 0.005, memory: 5992, i_loss: 0.1616, mask_loss: 0.0239, loss_rpn_cls: 0.0692, loss_rpn_bbox: 0.0832, loss_cls: 0.2970, acc: 89.2891, loss_bbox: 0.4053, loss: 1.0403
2023-01-20 18:50:36,197 - mmdet - INFO - Epoch [1][350/1286]	lr: 3.492e-03, eta: 1:21:46, time: 0.318, data_time: 0.005, memory: 5992, i_loss: 0.1618, mask_loss: 0.0202, loss_rpn_cls: 0.0618, loss_rpn_bbox: 0.0851, loss_cls: 0.3109, acc: 88.5986, loss_bbox: 0.4330, loss: 1.0728
2023-01-20 18:50:55,374 - mmdet - INFO - Epoch [1][400/1286]	lr: 3.991e-03, eta: 1:23:19, time: 0.383, data_time: 0.005, memory: 5992, i_loss: 0.1640, mask_loss: 0.0191, loss_rpn_cls: 0.0607, loss_rpn_bbox: 0.0728, loss_cls: 0.2999, acc: 88.8340, loss_bbox: 0.4406, loss: 1.0571
2023-01-20 18:51:27,476 - mmdet - INFO - Epoch [1][450/1286]	lr: 4.491e-03, eta: 1:31:37, time: 0.642, data_time: 0.006, memory: 5992, i_loss: 0.1580, mask_loss: 0.0188, loss_rpn_cls: 0.0569, loss_rpn_bbox: 0.0751, loss_cls: 0.2964, acc: 88.6201, loss_bbox: 0.4501, loss: 1.0553
2023-01-20 18:51:59,213 - mmdet - INFO - Epoch [1][500/1286]	lr: 4.990e-03, eta: 1:37:59, time: 0.635, data_time: 0.006, memory: 5992, i_loss: 0.1579, mask_loss: 0.0195, loss_rpn_cls: 0.0559, loss_rpn_bbox: 0.0841, loss_cls: 0.3039, acc: 88.4268, loss_bbox: 0.4547, loss: 1.0760
2023-01-20 18:52:30,690 - mmdet - INFO - Epoch [1][550/1286]	lr: 5.000e-03, eta: 1:42:58, time: 0.630, data_time: 0.006, memory: 5992, i_loss: 0.1594, mask_loss: 0.0171, loss_rpn_cls: 0.0511, loss_rpn_bbox: 0.0742, loss_cls: 0.2827, acc: 89.0996, loss_bbox: 0.4430, loss: 1.0276
2023-01-20 18:53:02,147 - mmdet - INFO - Epoch [1][600/1286]	lr: 5.000e-03, eta: 1:47:02, time: 0.629, data_time: 0.006, memory: 5992, i_loss: 0.1572, mask_loss: 0.0195, loss_rpn_cls: 0.0498, loss_rpn_bbox: 0.0742, loss_cls: 0.2721, acc: 89.4150, loss_bbox: 0.4400, loss: 1.0129
2023-01-20 18:53:33,449 - mmdet - INFO - Epoch [1][650/1286]	lr: 5.000e-03, eta: 1:50:20, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1580, mask_loss: 0.0144, loss_rpn_cls: 0.0392, loss_rpn_bbox: 0.0626, loss_cls: 0.2571, acc: 89.9141, loss_bbox: 0.4104, loss: 0.9417
2023-01-20 18:54:04,830 - mmdet - INFO - Epoch [1][700/1286]	lr: 5.000e-03, eta: 1:53:07, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1574, mask_loss: 0.0154, loss_rpn_cls: 0.0414, loss_rpn_bbox: 0.0651, loss_cls: 0.2455, acc: 90.3057, loss_bbox: 0.4110, loss: 0.9357
2023-01-20 18:54:36,071 - mmdet - INFO - Epoch [1][750/1286]	lr: 5.000e-03, eta: 1:55:24, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1581, mask_loss: 0.0144, loss_rpn_cls: 0.0405, loss_rpn_bbox: 0.0641, loss_cls: 0.2456, acc: 90.3242, loss_bbox: 0.3993, loss: 0.9219
2023-01-20 18:55:07,410 - mmdet - INFO - Epoch [1][800/1286]	lr: 5.000e-03, eta: 1:57:22, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1574, mask_loss: 0.0178, loss_rpn_cls: 0.0425, loss_rpn_bbox: 0.0632, loss_cls: 0.2526, acc: 90.0547, loss_bbox: 0.4185, loss: 0.9522
2023-01-20 18:55:38,838 - mmdet - INFO - Epoch [1][850/1286]	lr: 5.000e-03, eta: 1:59:05, time: 0.629, data_time: 0.006, memory: 5992, i_loss: 0.1570, mask_loss: 0.0156, loss_rpn_cls: 0.0458, loss_rpn_bbox: 0.0623, loss_cls: 0.2447, acc: 90.4961, loss_bbox: 0.4126, loss: 0.9379
2023-01-20 18:56:10,237 - mmdet - INFO - Epoch [1][900/1286]	lr: 5.000e-03, eta: 2:00:32, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1593, mask_loss: 0.0146, loss_rpn_cls: 0.0347, loss_rpn_bbox: 0.0605, loss_cls: 0.2305, acc: 90.8828, loss_bbox: 0.3935, loss: 0.8931
2023-01-20 18:56:41,550 - mmdet - INFO - Epoch [1][950/1286]	lr: 5.000e-03, eta: 2:01:45, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0145, loss_rpn_cls: 0.0380, loss_rpn_bbox: 0.0576, loss_cls: 0.2387, acc: 90.5762, loss_bbox: 0.3876, loss: 0.8930
2023-01-20 18:57:12,959 - mmdet - INFO - Exp name: faster_rcnn_r50_fpn_tinet_flir2.py
2023-01-20 18:57:12,959 - mmdet - INFO - Epoch [1][1000/1286]	lr: 5.000e-03, eta: 2:02:49, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1571, mask_loss: 0.0129, loss_rpn_cls: 0.0350, loss_rpn_bbox: 0.0595, loss_cls: 0.2328, acc: 90.6377, loss_bbox: 0.4097, loss: 0.9070
2023-01-20 18:57:44,649 - mmdet - INFO - Epoch [1][1050/1286]	lr: 5.000e-03, eta: 2:03:48, time: 0.634, data_time: 0.006, memory: 5992, i_loss: 0.1568, mask_loss: 0.0135, loss_rpn_cls: 0.0345, loss_rpn_bbox: 0.0632, loss_cls: 0.2509, acc: 89.9658, loss_bbox: 0.4191, loss: 0.9379
2023-01-20 18:58:16,146 - mmdet - INFO - Epoch [1][1100/1286]	lr: 5.000e-03, eta: 2:04:36, time: 0.630, data_time: 0.006, memory: 5992, i_loss: 0.1587, mask_loss: 0.0139, loss_rpn_cls: 0.0408, loss_rpn_bbox: 0.0592, loss_cls: 0.2361, acc: 90.7510, loss_bbox: 0.3968, loss: 0.9055
2023-01-20 18:58:47,674 - mmdet - INFO - Epoch [1][1150/1286]	lr: 5.000e-03, eta: 2:05:17, time: 0.631, data_time: 0.006, memory: 5992, i_loss: 0.1571, mask_loss: 0.0133, loss_rpn_cls: 0.0419, loss_rpn_bbox: 0.0634, loss_cls: 0.2365, acc: 90.5547, loss_bbox: 0.4062, loss: 0.9185
2023-01-20 18:59:19,138 - mmdet - INFO - Epoch [1][1200/1286]	lr: 5.000e-03, eta: 2:05:52, time: 0.629, data_time: 0.006, memory: 5992, i_loss: 0.1568, mask_loss: 0.0126, loss_rpn_cls: 0.0346, loss_rpn_bbox: 0.0621, loss_cls: 0.2356, acc: 90.3242, loss_bbox: 0.4076, loss: 0.9093
2023-01-20 18:59:50,462 - mmdet - INFO - Epoch [1][1250/1286]	lr: 5.000e-03, eta: 2:06:20, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1571, mask_loss: 0.0121, loss_rpn_cls: 0.0342, loss_rpn_bbox: 0.0598, loss_cls: 0.2437, acc: 90.3320, loss_bbox: 0.4010, loss: 0.9078
2023-01-20 19:00:46,747 - mmdet - INFO - Epoch [2][50/1286]	lr: 5.000e-03, eta: 2:03:23, time: 0.672, data_time: 0.050, memory: 5992, i_loss: 0.1567, mask_loss: 0.0139, loss_rpn_cls: 0.0343, loss_rpn_bbox: 0.0741, loss_cls: 0.2506, acc: 89.5596, loss_bbox: 0.4411, loss: 0.9705
2023-01-20 19:01:18,094 - mmdet - INFO - Epoch [2][100/1286]	lr: 5.000e-03, eta: 2:03:49, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1569, mask_loss: 0.0125, loss_rpn_cls: 0.0317, loss_rpn_bbox: 0.0601, loss_cls: 0.2214, acc: 91.0098, loss_bbox: 0.3865, loss: 0.8690
2023-01-20 19:01:49,441 - mmdet - INFO - Epoch [2][150/1286]	lr: 5.000e-03, eta: 2:04:10, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1568, mask_loss: 0.0139, loss_rpn_cls: 0.0373, loss_rpn_bbox: 0.0568, loss_cls: 0.2268, acc: 90.9697, loss_bbox: 0.3894, loss: 0.8809
2023-01-20 19:02:20,879 - mmdet - INFO - Epoch [2][200/1286]	lr: 5.000e-03, eta: 2:04:28, time: 0.629, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0135, loss_rpn_cls: 0.0347, loss_rpn_bbox: 0.0598, loss_cls: 0.2196, acc: 91.2539, loss_bbox: 0.3788, loss: 0.8630
2023-01-20 19:02:52,198 - mmdet - INFO - Epoch [2][250/1286]	lr: 5.000e-03, eta: 2:04:43, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0125, loss_rpn_cls: 0.0299, loss_rpn_bbox: 0.0607, loss_cls: 0.2229, acc: 90.8730, loss_bbox: 0.3934, loss: 0.8761
2023-01-20 19:03:23,509 - mmdet - INFO - Epoch [2][300/1286]	lr: 5.000e-03, eta: 2:04:54, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0119, loss_rpn_cls: 0.0302, loss_rpn_bbox: 0.0604, loss_cls: 0.2122, acc: 91.3662, loss_bbox: 0.3758, loss: 0.8471
2023-01-20 19:03:54,889 - mmdet - INFO - Epoch [2][350/1286]	lr: 5.000e-03, eta: 2:05:03, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0113, loss_rpn_cls: 0.0278, loss_rpn_bbox: 0.0525, loss_cls: 0.2013, acc: 91.7402, loss_bbox: 0.3631, loss: 0.8128
2023-01-20 19:04:21,595 - mmdet - INFO - Epoch [2][400/1286]	lr: 5.000e-03, eta: 2:04:32, time: 0.534, data_time: 0.006, memory: 5992, i_loss: 0.1595, mask_loss: 0.0120, loss_rpn_cls: 0.0289, loss_rpn_bbox: 0.0587, loss_cls: 0.2135, acc: 91.1729, loss_bbox: 0.3910, loss: 0.8636
2023-01-20 19:04:50,066 - mmdet - INFO - Epoch [2][450/1286]	lr: 5.000e-03, eta: 2:04:15, time: 0.569, data_time: 0.005, memory: 5992, i_loss: 0.1567, mask_loss: 0.0112, loss_rpn_cls: 0.0334, loss_rpn_bbox: 0.0558, loss_cls: 0.2160, acc: 91.2480, loss_bbox: 0.3745, loss: 0.8475
2023-01-20 19:05:19,663 - mmdet - INFO - Epoch [2][500/1286]	lr: 5.000e-03, eta: 2:04:06, time: 0.592, data_time: 0.005, memory: 5992, i_loss: 0.1567, mask_loss: 0.0109, loss_rpn_cls: 0.0276, loss_rpn_bbox: 0.0626, loss_cls: 0.2117, acc: 91.1523, loss_bbox: 0.3879, loss: 0.8574
2023-01-20 19:05:43,049 - mmdet - INFO - Epoch [2][550/1286]	lr: 5.000e-03, eta: 2:03:10, time: 0.468, data_time: 0.005, memory: 5992, i_loss: 0.1570, mask_loss: 0.0111, loss_rpn_cls: 0.0298, loss_rpn_bbox: 0.0544, loss_cls: 0.2178, acc: 91.1963, loss_bbox: 0.3802, loss: 0.8502
2023-01-20 19:06:13,139 - mmdet - INFO - Epoch [2][600/1286]	lr: 5.000e-03, eta: 2:03:04, time: 0.602, data_time: 0.006, memory: 5992, i_loss: 0.1568, mask_loss: 0.0115, loss_rpn_cls: 0.0306, loss_rpn_bbox: 0.0591, loss_cls: 0.2170, acc: 91.1719, loss_bbox: 0.4005, loss: 0.8754
2023-01-20 19:06:44,537 - mmdet - INFO - Epoch [2][650/1286]	lr: 5.000e-03, eta: 2:03:05, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1568, mask_loss: 0.0100, loss_rpn_cls: 0.0296, loss_rpn_bbox: 0.0589, loss_cls: 0.2108, acc: 91.4434, loss_bbox: 0.3771, loss: 0.8432
2023-01-20 19:07:15,926 - mmdet - INFO - Epoch [2][700/1286]	lr: 5.000e-03, eta: 2:03:05, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0103, loss_rpn_cls: 0.0289, loss_rpn_bbox: 0.0464, loss_cls: 0.2016, acc: 91.9521, loss_bbox: 0.3478, loss: 0.7919
2023-01-20 19:07:47,280 - mmdet - INFO - Epoch [2][750/1286]	lr: 5.000e-03, eta: 2:03:03, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1591, mask_loss: 0.0104, loss_rpn_cls: 0.0281, loss_rpn_bbox: 0.0537, loss_cls: 0.2093, acc: 91.4131, loss_bbox: 0.3790, loss: 0.8396
2023-01-20 19:08:18,682 - mmdet - INFO - Epoch [2][800/1286]	lr: 5.000e-03, eta: 2:03:00, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0106, loss_rpn_cls: 0.0296, loss_rpn_bbox: 0.0574, loss_cls: 0.2129, acc: 91.2266, loss_bbox: 0.3860, loss: 0.8531
2023-01-20 19:08:50,047 - mmdet - INFO - Epoch [2][850/1286]	lr: 5.000e-03, eta: 2:02:56, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0110, loss_rpn_cls: 0.0260, loss_rpn_bbox: 0.0496, loss_cls: 0.2096, acc: 91.5508, loss_bbox: 0.3716, loss: 0.8246
2023-01-20 19:09:21,470 - mmdet - INFO - Epoch [2][900/1286]	lr: 5.000e-03, eta: 2:02:50, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0102, loss_rpn_cls: 0.0276, loss_rpn_bbox: 0.0475, loss_cls: 0.2015, acc: 91.8535, loss_bbox: 0.3530, loss: 0.7964
2023-01-20 19:09:52,777 - mmdet - INFO - Epoch [2][950/1286]	lr: 5.000e-03, eta: 2:02:43, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0107, loss_rpn_cls: 0.0314, loss_rpn_bbox: 0.0521, loss_cls: 0.2090, acc: 91.5996, loss_bbox: 0.3739, loss: 0.8339
2023-01-20 19:10:24,133 - mmdet - INFO - Epoch [2][1000/1286]	lr: 5.000e-03, eta: 2:02:35, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0098, loss_rpn_cls: 0.0270, loss_rpn_bbox: 0.0469, loss_cls: 0.1939, acc: 92.1846, loss_bbox: 0.3468, loss: 0.7810
2023-01-20 19:10:55,467 - mmdet - INFO - Epoch [2][1050/1286]	lr: 5.000e-03, eta: 2:02:26, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0109, loss_rpn_cls: 0.0256, loss_rpn_bbox: 0.0472, loss_cls: 0.1946, acc: 91.9912, loss_bbox: 0.3489, loss: 0.7838
2023-01-20 19:11:26,879 - mmdet - INFO - Epoch [2][1100/1286]	lr: 5.000e-03, eta: 2:02:16, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1568, mask_loss: 0.0106, loss_rpn_cls: 0.0292, loss_rpn_bbox: 0.0510, loss_cls: 0.2012, acc: 91.8125, loss_bbox: 0.3627, loss: 0.8115
2023-01-20 19:11:58,262 - mmdet - INFO - Epoch [2][1150/1286]	lr: 5.000e-03, eta: 2:02:06, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1570, mask_loss: 0.0094, loss_rpn_cls: 0.0265, loss_rpn_bbox: 0.0499, loss_cls: 0.1924, acc: 92.1855, loss_bbox: 0.3525, loss: 0.7878
2023-01-20 19:12:29,676 - mmdet - INFO - Epoch [2][1200/1286]	lr: 5.000e-03, eta: 2:01:54, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0118, loss_rpn_cls: 0.0290, loss_rpn_bbox: 0.0562, loss_cls: 0.2082, acc: 91.6104, loss_bbox: 0.3758, loss: 0.8376
2023-01-20 19:13:01,026 - mmdet - INFO - Epoch [2][1250/1286]	lr: 5.000e-03, eta: 2:01:42, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1602, mask_loss: 0.0102, loss_rpn_cls: 0.0295, loss_rpn_bbox: 0.0577, loss_cls: 0.2045, acc: 91.6992, loss_bbox: 0.3638, loss: 0.8258
2023-01-20 19:13:57,229 - mmdet - INFO - Epoch [3][50/1286]	lr: 5.000e-03, eta: 1:59:39, time: 0.671, data_time: 0.051, memory: 5992, i_loss: 0.1566, mask_loss: 0.0096, loss_rpn_cls: 0.0249, loss_rpn_bbox: 0.0514, loss_cls: 0.1958, acc: 92.0029, loss_bbox: 0.3486, loss: 0.7870
2023-01-20 19:14:28,596 - mmdet - INFO - Epoch [3][100/1286]	lr: 5.000e-03, eta: 1:59:27, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0100, loss_rpn_cls: 0.0254, loss_rpn_bbox: 0.0512, loss_cls: 0.1884, acc: 92.2236, loss_bbox: 0.3428, loss: 0.7745
2023-01-20 19:14:59,923 - mmdet - INFO - Epoch [3][150/1286]	lr: 5.000e-03, eta: 1:59:14, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0113, loss_rpn_cls: 0.0274, loss_rpn_bbox: 0.0540, loss_cls: 0.2034, acc: 91.5352, loss_bbox: 0.3712, loss: 0.8240
2023-01-20 19:15:31,313 - mmdet - INFO - Epoch [3][200/1286]	lr: 5.000e-03, eta: 1:59:01, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0087, loss_rpn_cls: 0.0232, loss_rpn_bbox: 0.0485, loss_cls: 0.1862, acc: 92.2412, loss_bbox: 0.3508, loss: 0.7741
2023-01-20 19:16:02,607 - mmdet - INFO - Epoch [3][250/1286]	lr: 5.000e-03, eta: 1:58:46, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1573, mask_loss: 0.0093, loss_rpn_cls: 0.0229, loss_rpn_bbox: 0.0541, loss_cls: 0.1938, acc: 91.9062, loss_bbox: 0.3623, loss: 0.7997
2023-01-20 19:16:33,896 - mmdet - INFO - Epoch [3][300/1286]	lr: 5.000e-03, eta: 1:58:31, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1624, mask_loss: 0.0094, loss_rpn_cls: 0.0236, loss_rpn_bbox: 0.0517, loss_cls: 0.1911, acc: 92.3057, loss_bbox: 0.3484, loss: 0.7866
2023-01-20 19:17:05,194 - mmdet - INFO - Epoch [3][350/1286]	lr: 5.000e-03, eta: 1:58:16, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1570, mask_loss: 0.0098, loss_rpn_cls: 0.0230, loss_rpn_bbox: 0.0501, loss_cls: 0.2005, acc: 91.8291, loss_bbox: 0.3623, loss: 0.8028
2023-01-20 19:17:36,501 - mmdet - INFO - Epoch [3][400/1286]	lr: 5.000e-03, eta: 1:58:00, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1568, mask_loss: 0.0096, loss_rpn_cls: 0.0255, loss_rpn_bbox: 0.0509, loss_cls: 0.1932, acc: 92.1709, loss_bbox: 0.3465, loss: 0.7825
2023-01-20 19:18:07,738 - mmdet - INFO - Epoch [3][450/1286]	lr: 5.000e-03, eta: 1:57:43, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1569, mask_loss: 0.0100, loss_rpn_cls: 0.0233, loss_rpn_bbox: 0.0524, loss_cls: 0.1931, acc: 91.9307, loss_bbox: 0.3664, loss: 0.8022
2023-01-20 19:18:39,064 - mmdet - INFO - Epoch [3][500/1286]	lr: 5.000e-03, eta: 1:57:26, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1595, mask_loss: 0.0093, loss_rpn_cls: 0.0230, loss_rpn_bbox: 0.0494, loss_cls: 0.1879, acc: 92.3828, loss_bbox: 0.3510, loss: 0.7801
2023-01-20 19:19:09,813 - mmdet - INFO - Epoch [3][550/1286]	lr: 5.000e-03, eta: 1:57:06, time: 0.615, data_time: 0.006, memory: 5992, i_loss: 0.1568, mask_loss: 0.0092, loss_rpn_cls: 0.0241, loss_rpn_bbox: 0.0502, loss_cls: 0.1885, acc: 92.2109, loss_bbox: 0.3449, loss: 0.7736
2023-01-20 19:19:35,102 - mmdet - INFO - Epoch [3][600/1286]	lr: 5.000e-03, eta: 1:56:25, time: 0.506, data_time: 0.005, memory: 5992, i_loss: 0.1566, mask_loss: 0.0094, loss_rpn_cls: 0.0272, loss_rpn_bbox: 0.0531, loss_cls: 0.1958, acc: 91.9082, loss_bbox: 0.3571, loss: 0.7993
2023-01-20 19:20:03,761 - mmdet - INFO - Epoch [3][650/1286]	lr: 5.000e-03, eta: 1:55:57, time: 0.573, data_time: 0.005, memory: 5992, i_loss: 0.1566, mask_loss: 0.0096, loss_rpn_cls: 0.0261, loss_rpn_bbox: 0.0537, loss_cls: 0.1946, acc: 91.9961, loss_bbox: 0.3525, loss: 0.7931
2023-01-20 19:20:31,105 - mmdet - INFO - Epoch [3][700/1286]	lr: 5.000e-03, eta: 1:55:25, time: 0.547, data_time: 0.005, memory: 5992, i_loss: 0.1566, mask_loss: 0.0098, loss_rpn_cls: 0.0257, loss_rpn_bbox: 0.0536, loss_cls: 0.1999, acc: 91.9424, loss_bbox: 0.3621, loss: 0.8078
2023-01-20 19:20:56,205 - mmdet - INFO - Epoch [3][750/1286]	lr: 5.000e-03, eta: 1:54:44, time: 0.502, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0087, loss_rpn_cls: 0.0256, loss_rpn_bbox: 0.0512, loss_cls: 0.1861, acc: 92.2461, loss_bbox: 0.3490, loss: 0.7772
2023-01-20 19:21:27,500 - mmdet - INFO - Epoch [3][800/1286]	lr: 5.000e-03, eta: 1:54:26, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0090, loss_rpn_cls: 0.0209, loss_rpn_bbox: 0.0462, loss_cls: 0.1850, acc: 92.4902, loss_bbox: 0.3480, loss: 0.7658
2023-01-20 19:21:58,813 - mmdet - INFO - Epoch [3][850/1286]	lr: 5.000e-03, eta: 1:54:07, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0096, loss_rpn_cls: 0.0229, loss_rpn_bbox: 0.0473, loss_cls: 0.1902, acc: 92.1680, loss_bbox: 0.3543, loss: 0.7809
2023-01-20 19:22:30,121 - mmdet - INFO - Epoch [3][900/1286]	lr: 5.000e-03, eta: 1:53:48, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1568, mask_loss: 0.0093, loss_rpn_cls: 0.0213, loss_rpn_bbox: 0.0518, loss_cls: 0.1876, acc: 92.2607, loss_bbox: 0.3426, loss: 0.7694
2023-01-20 19:23:01,542 - mmdet - INFO - Epoch [3][950/1286]	lr: 5.000e-03, eta: 1:53:30, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0094, loss_rpn_cls: 0.0205, loss_rpn_bbox: 0.0484, loss_cls: 0.1813, acc: 92.3926, loss_bbox: 0.3455, loss: 0.7618
2023-01-20 19:23:32,768 - mmdet - INFO - Epoch [3][1000/1286]	lr: 5.000e-03, eta: 1:53:10, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1594, mask_loss: 0.0094, loss_rpn_cls: 0.0214, loss_rpn_bbox: 0.0469, loss_cls: 0.1832, acc: 92.5361, loss_bbox: 0.3404, loss: 0.7607
2023-01-20 19:24:04,137 - mmdet - INFO - Epoch [3][1050/1286]	lr: 5.000e-03, eta: 1:52:50, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0097, loss_rpn_cls: 0.0273, loss_rpn_bbox: 0.0506, loss_cls: 0.1874, acc: 92.2676, loss_bbox: 0.3534, loss: 0.7851
2023-01-20 19:24:35,415 - mmdet - INFO - Epoch [3][1100/1286]	lr: 5.000e-03, eta: 1:52:30, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0095, loss_rpn_cls: 0.0218, loss_rpn_bbox: 0.0501, loss_cls: 0.1856, acc: 92.3623, loss_bbox: 0.3435, loss: 0.7671
2023-01-20 19:25:06,809 - mmdet - INFO - Epoch [3][1150/1286]	lr: 5.000e-03, eta: 1:52:09, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1568, mask_loss: 0.0092, loss_rpn_cls: 0.0225, loss_rpn_bbox: 0.0521, loss_cls: 0.1989, acc: 91.7861, loss_bbox: 0.3657, loss: 0.8052
2023-01-20 19:25:38,170 - mmdet - INFO - Epoch [3][1200/1286]	lr: 5.000e-03, eta: 1:51:49, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1568, mask_loss: 0.0097, loss_rpn_cls: 0.0191, loss_rpn_bbox: 0.0429, loss_cls: 0.1735, acc: 92.9873, loss_bbox: 0.3222, loss: 0.7240
2023-01-20 19:26:09,478 - mmdet - INFO - Epoch [3][1250/1286]	lr: 5.000e-03, eta: 1:51:28, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0089, loss_rpn_cls: 0.0230, loss_rpn_bbox: 0.0505, loss_cls: 0.1824, acc: 92.3701, loss_bbox: 0.3456, loss: 0.7670
2023-01-20 19:26:32,129 - mmdet - INFO - Saving checkpoint at 3 epochs
2023-01-20 19:27:56,151 - mmdet - INFO - Evaluating bbox...
2023-01-20 19:28:00,589 - mmdet - INFO - 
+----------+--------+----------+--------+----------+--------+
| category | AP50   | category | AP50   | category | AP50   |
+----------+--------+----------+--------+----------+--------+
| car      | 0.9060 | person   | 0.8575 | bicycle  | 0.7082 |
| dog      | 0.1109 | None     | None   | None     | None   |
+----------+--------+----------+--------+----------+--------+
2023-01-20 19:28:00,589 - mmdet - INFO - 
+----------+--------+----------+--------+----------+--------+
| category | AP     | category | AP     | category | AP     |
+----------+--------+----------+--------+----------+--------+
| car      | 0.5454 | person   | 0.4138 | bicycle  | 0.2716 |
| dog      | 0.0364 | None     | None   | None     | None   |
+----------+--------+----------+--------+----------+--------+
2023-01-20 19:28:00,616 - mmdet - INFO - Exp name: faster_rcnn_r50_fpn_tinet_flir2.py
2023-01-20 19:28:00,617 - mmdet - INFO - Epoch(val) [3][1013]	bbox_mAP: 0.3168, bbox_mAP_50: 0.6457, bbox_mAP_75: 0.2609, bbox_mAP_s: 0.2472, bbox_mAP_m: 0.3647, bbox_mAP_l: 0.5129, bbox_mAP_copypaste: 0.3168 0.6457 0.2609 0.2472 0.3647 0.5129
2023-01-20 19:28:34,449 - mmdet - INFO - Epoch [4][50/1286]	lr: 5.000e-03, eta: 1:49:52, time: 0.676, data_time: 0.052, memory: 5992, i_loss: 0.1566, mask_loss: 0.0081, loss_rpn_cls: 0.0207, loss_rpn_bbox: 0.0525, loss_cls: 0.1869, acc: 92.2617, loss_bbox: 0.3506, loss: 0.7755
2023-01-20 19:29:05,869 - mmdet - INFO - Epoch [4][100/1286]	lr: 5.000e-03, eta: 1:49:31, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0087, loss_rpn_cls: 0.0211, loss_rpn_bbox: 0.0486, loss_cls: 0.1814, acc: 92.4922, loss_bbox: 0.3405, loss: 0.7570
2023-01-20 19:29:37,266 - mmdet - INFO - Epoch [4][150/1286]	lr: 5.000e-03, eta: 1:49:11, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1569, mask_loss: 0.0092, loss_rpn_cls: 0.0208, loss_rpn_bbox: 0.0536, loss_cls: 0.1894, acc: 92.0146, loss_bbox: 0.3640, loss: 0.7940
2023-01-20 19:30:08,771 - mmdet - INFO - Epoch [4][200/1286]	lr: 5.000e-03, eta: 1:48:50, time: 0.630, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0083, loss_rpn_cls: 0.0185, loss_rpn_bbox: 0.0446, loss_cls: 0.1680, acc: 93.0488, loss_bbox: 0.3210, loss: 0.7171
2023-01-20 19:30:40,022 - mmdet - INFO - Epoch [4][250/1286]	lr: 5.000e-03, eta: 1:48:28, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0094, loss_rpn_cls: 0.0208, loss_rpn_bbox: 0.0486, loss_cls: 0.1835, acc: 92.3555, loss_bbox: 0.3459, loss: 0.7649
2023-01-20 19:31:11,337 - mmdet - INFO - Epoch [4][300/1286]	lr: 5.000e-03, eta: 1:48:06, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0088, loss_rpn_cls: 0.0166, loss_rpn_bbox: 0.0422, loss_cls: 0.1698, acc: 92.8477, loss_bbox: 0.3244, loss: 0.7185
2023-01-20 19:31:42,679 - mmdet - INFO - Epoch [4][350/1286]	lr: 5.000e-03, eta: 1:47:45, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0078, loss_rpn_cls: 0.0167, loss_rpn_bbox: 0.0407, loss_cls: 0.1664, acc: 93.0635, loss_bbox: 0.3205, loss: 0.7089
2023-01-20 19:32:13,949 - mmdet - INFO - Epoch [4][400/1286]	lr: 5.000e-03, eta: 1:47:22, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0081, loss_rpn_cls: 0.0189, loss_rpn_bbox: 0.0531, loss_cls: 0.1865, acc: 92.2832, loss_bbox: 0.3474, loss: 0.7706
2023-01-20 19:32:45,198 - mmdet - INFO - Epoch [4][450/1286]	lr: 5.000e-03, eta: 1:47:00, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0082, loss_rpn_cls: 0.0188, loss_rpn_bbox: 0.0474, loss_cls: 0.1769, acc: 92.8350, loss_bbox: 0.3248, loss: 0.7328
2023-01-20 19:33:16,522 - mmdet - INFO - Epoch [4][500/1286]	lr: 5.000e-03, eta: 1:46:37, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0086, loss_rpn_cls: 0.0198, loss_rpn_bbox: 0.0480, loss_cls: 0.1807, acc: 92.4668, loss_bbox: 0.3410, loss: 0.7546
2023-01-20 19:33:45,270 - mmdet - INFO - Epoch [4][550/1286]	lr: 5.000e-03, eta: 1:46:08, time: 0.575, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0089, loss_rpn_cls: 0.0187, loss_rpn_bbox: 0.0442, loss_cls: 0.1715, acc: 92.9561, loss_bbox: 0.3223, loss: 0.7221
2023-01-20 19:34:12,360 - mmdet - INFO - Epoch [4][600/1286]	lr: 5.000e-03, eta: 1:45:35, time: 0.542, data_time: 0.005, memory: 5992, i_loss: 0.1566, mask_loss: 0.0090, loss_rpn_cls: 0.0188, loss_rpn_bbox: 0.0416, loss_cls: 0.1699, acc: 93.1855, loss_bbox: 0.3188, loss: 0.7147
2023-01-20 19:34:39,923 - mmdet - INFO - Epoch [4][650/1286]	lr: 5.000e-03, eta: 1:45:03, time: 0.551, data_time: 0.005, memory: 5992, i_loss: 0.1567, mask_loss: 0.0078, loss_rpn_cls: 0.0182, loss_rpn_bbox: 0.0448, loss_cls: 0.1724, acc: 92.7412, loss_bbox: 0.3258, loss: 0.7257
2023-01-20 19:35:06,482 - mmdet - INFO - Epoch [4][700/1286]	lr: 5.000e-03, eta: 1:44:28, time: 0.531, data_time: 0.005, memory: 5992, i_loss: 0.1568, mask_loss: 0.0087, loss_rpn_cls: 0.0218, loss_rpn_bbox: 0.0498, loss_cls: 0.1803, acc: 92.5742, loss_bbox: 0.3460, loss: 0.7633
2023-01-20 19:35:33,383 - mmdet - INFO - Epoch [4][750/1286]	lr: 5.000e-03, eta: 1:43:55, time: 0.538, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0087, loss_rpn_cls: 0.0219, loss_rpn_bbox: 0.0485, loss_cls: 0.1799, acc: 92.4414, loss_bbox: 0.3420, loss: 0.7576
2023-01-20 19:36:04,754 - mmdet - INFO - Epoch [4][800/1286]	lr: 5.000e-03, eta: 1:43:32, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0086, loss_rpn_cls: 0.0190, loss_rpn_bbox: 0.0483, loss_cls: 0.1787, acc: 92.5186, loss_bbox: 0.3469, loss: 0.7582
2023-01-20 19:36:36,023 - mmdet - INFO - Epoch [4][850/1286]	lr: 5.000e-03, eta: 1:43:09, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0079, loss_rpn_cls: 0.0173, loss_rpn_bbox: 0.0499, loss_cls: 0.1743, acc: 92.7139, loss_bbox: 0.3302, loss: 0.7363
2023-01-20 19:37:07,255 - mmdet - INFO - Epoch [4][900/1286]	lr: 5.000e-03, eta: 1:42:45, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1571, mask_loss: 0.0089, loss_rpn_cls: 0.0206, loss_rpn_bbox: 0.0498, loss_cls: 0.1755, acc: 92.7188, loss_bbox: 0.3321, loss: 0.7440
2023-01-20 19:37:38,648 - mmdet - INFO - Epoch [4][950/1286]	lr: 5.000e-03, eta: 1:42:22, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0087, loss_rpn_cls: 0.0203, loss_rpn_bbox: 0.0455, loss_cls: 0.1783, acc: 92.5957, loss_bbox: 0.3346, loss: 0.7440
2023-01-20 19:38:09,932 - mmdet - INFO - Epoch [4][1000/1286]	lr: 5.000e-03, eta: 1:41:58, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0083, loss_rpn_cls: 0.0198, loss_rpn_bbox: 0.0446, loss_cls: 0.1718, acc: 92.9150, loss_bbox: 0.3279, loss: 0.7291
2023-01-20 19:38:41,169 - mmdet - INFO - Epoch [4][1050/1286]	lr: 5.000e-03, eta: 1:41:34, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1592, mask_loss: 0.0079, loss_rpn_cls: 0.0209, loss_rpn_bbox: 0.0460, loss_cls: 0.1769, acc: 92.7197, loss_bbox: 0.3431, loss: 0.7541
2023-01-20 19:39:12,487 - mmdet - INFO - Epoch [4][1100/1286]	lr: 5.000e-03, eta: 1:41:10, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1572, mask_loss: 0.0085, loss_rpn_cls: 0.0220, loss_rpn_bbox: 0.0470, loss_cls: 0.1776, acc: 92.6816, loss_bbox: 0.3427, loss: 0.7550
2023-01-20 19:39:43,819 - mmdet - INFO - Epoch [4][1150/1286]	lr: 5.000e-03, eta: 1:40:46, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0091, loss_rpn_cls: 0.0201, loss_rpn_bbox: 0.0480, loss_cls: 0.1778, acc: 92.6699, loss_bbox: 0.3350, loss: 0.7466
2023-01-20 19:40:15,043 - mmdet - INFO - Epoch [4][1200/1286]	lr: 5.000e-03, eta: 1:40:22, time: 0.624, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0085, loss_rpn_cls: 0.0197, loss_rpn_bbox: 0.0472, loss_cls: 0.1790, acc: 92.6152, loss_bbox: 0.3470, loss: 0.7580
2023-01-20 19:40:46,380 - mmdet - INFO - Epoch [4][1250/1286]	lr: 5.000e-03, eta: 1:39:57, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1570, mask_loss: 0.0095, loss_rpn_cls: 0.0212, loss_rpn_bbox: 0.0558, loss_cls: 0.1939, acc: 91.8877, loss_bbox: 0.3695, loss: 0.8068
2023-01-20 19:41:42,669 - mmdet - INFO - Epoch [5][50/1286]	lr: 5.000e-03, eta: 1:38:35, time: 0.673, data_time: 0.051, memory: 5992, i_loss: 0.1567, mask_loss: 0.0077, loss_rpn_cls: 0.0179, loss_rpn_bbox: 0.0479, loss_cls: 0.1741, acc: 92.7354, loss_bbox: 0.3393, loss: 0.7436
2023-01-20 19:42:13,982 - mmdet - INFO - Epoch [5][100/1286]	lr: 5.000e-03, eta: 1:38:11, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1583, mask_loss: 0.0074, loss_rpn_cls: 0.0156, loss_rpn_bbox: 0.0389, loss_cls: 0.1566, acc: 93.5234, loss_bbox: 0.3067, loss: 0.6835
2023-01-20 19:42:45,377 - mmdet - INFO - Epoch [5][150/1286]	lr: 5.000e-03, eta: 1:37:47, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0088, loss_rpn_cls: 0.0176, loss_rpn_bbox: 0.0470, loss_cls: 0.1725, acc: 92.6885, loss_bbox: 0.3309, loss: 0.7335
2023-01-20 19:43:16,640 - mmdet - INFO - Epoch [5][200/1286]	lr: 5.000e-03, eta: 1:37:22, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0085, loss_rpn_cls: 0.0203, loss_rpn_bbox: 0.0500, loss_cls: 0.1823, acc: 92.5654, loss_bbox: 0.3505, loss: 0.7682
2023-01-20 19:43:47,888 - mmdet - INFO - Epoch [5][250/1286]	lr: 5.000e-03, eta: 1:36:58, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0089, loss_rpn_cls: 0.0167, loss_rpn_bbox: 0.0496, loss_cls: 0.1727, acc: 92.7861, loss_bbox: 0.3293, loss: 0.7339
2023-01-20 19:44:19,185 - mmdet - INFO - Epoch [5][300/1286]	lr: 5.000e-03, eta: 1:36:33, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0076, loss_rpn_cls: 0.0162, loss_rpn_bbox: 0.0446, loss_cls: 0.1621, acc: 93.2324, loss_bbox: 0.3182, loss: 0.7054
2023-01-20 19:44:50,450 - mmdet - INFO - Epoch [5][350/1286]	lr: 5.000e-03, eta: 1:36:08, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0077, loss_rpn_cls: 0.0173, loss_rpn_bbox: 0.0439, loss_cls: 0.1607, acc: 93.3662, loss_bbox: 0.3141, loss: 0.7003
2023-01-20 19:45:21,874 - mmdet - INFO - Epoch [5][400/1286]	lr: 5.000e-03, eta: 1:35:43, time: 0.629, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0078, loss_rpn_cls: 0.0170, loss_rpn_bbox: 0.0496, loss_cls: 0.1726, acc: 92.6738, loss_bbox: 0.3343, loss: 0.7379
2023-01-20 19:45:53,199 - mmdet - INFO - Epoch [5][450/1286]	lr: 5.000e-03, eta: 1:35:18, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0073, loss_rpn_cls: 0.0172, loss_rpn_bbox: 0.0434, loss_cls: 0.1675, acc: 92.9922, loss_bbox: 0.3218, loss: 0.7140
2023-01-20 19:46:24,571 - mmdet - INFO - Epoch [5][500/1286]	lr: 5.000e-03, eta: 1:34:53, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0077, loss_rpn_cls: 0.0170, loss_rpn_bbox: 0.0419, loss_cls: 0.1615, acc: 93.3076, loss_bbox: 0.3161, loss: 0.7008
2023-01-20 19:46:55,843 - mmdet - INFO - Epoch [5][550/1286]	lr: 5.000e-03, eta: 1:34:28, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1569, mask_loss: 0.0084, loss_rpn_cls: 0.0167, loss_rpn_bbox: 0.0444, loss_cls: 0.1675, acc: 93.0000, loss_bbox: 0.3261, loss: 0.7200
2023-01-20 19:47:27,212 - mmdet - INFO - Epoch [5][600/1286]	lr: 5.000e-03, eta: 1:34:03, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0081, loss_rpn_cls: 0.0180, loss_rpn_bbox: 0.0474, loss_cls: 0.1712, acc: 92.8145, loss_bbox: 0.3372, loss: 0.7386
2023-01-20 19:47:58,490 - mmdet - INFO - Epoch [5][650/1286]	lr: 5.000e-03, eta: 1:33:37, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0093, loss_rpn_cls: 0.0221, loss_rpn_bbox: 0.0506, loss_cls: 0.1779, acc: 92.6016, loss_bbox: 0.3409, loss: 0.7575
2023-01-20 19:48:29,784 - mmdet - INFO - Epoch [5][700/1286]	lr: 5.000e-03, eta: 1:33:11, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0073, loss_rpn_cls: 0.0176, loss_rpn_bbox: 0.0403, loss_cls: 0.1612, acc: 93.3398, loss_bbox: 0.3064, loss: 0.6895
2023-01-20 19:48:55,112 - mmdet - INFO - Epoch [5][750/1286]	lr: 5.000e-03, eta: 1:32:36, time: 0.507, data_time: 0.005, memory: 5992, i_loss: 0.1566, mask_loss: 0.0089, loss_rpn_cls: 0.0182, loss_rpn_bbox: 0.0470, loss_cls: 0.1742, acc: 92.8174, loss_bbox: 0.3282, loss: 0.7331
2023-01-20 19:49:23,939 - mmdet - INFO - Epoch [5][800/1286]	lr: 5.000e-03, eta: 1:32:06, time: 0.577, data_time: 0.005, memory: 5992, i_loss: 0.1566, mask_loss: 0.0080, loss_rpn_cls: 0.0179, loss_rpn_bbox: 0.0428, loss_cls: 0.1608, acc: 93.3516, loss_bbox: 0.3159, loss: 0.7020
2023-01-20 19:49:52,864 - mmdet - INFO - Epoch [5][850/1286]	lr: 5.000e-03, eta: 1:31:37, time: 0.578, data_time: 0.005, memory: 5992, i_loss: 0.1566, mask_loss: 0.0074, loss_rpn_cls: 0.0166, loss_rpn_bbox: 0.0416, loss_cls: 0.1584, acc: 93.3584, loss_bbox: 0.3123, loss: 0.6930
2023-01-20 19:50:17,599 - mmdet - INFO - Epoch [5][900/1286]	lr: 5.000e-03, eta: 1:31:01, time: 0.495, data_time: 0.006, memory: 5992, i_loss: 0.1591, mask_loss: 0.0094, loss_rpn_cls: 0.0180, loss_rpn_bbox: 0.0441, loss_cls: 0.1622, acc: 93.2510, loss_bbox: 0.3261, loss: 0.7190
2023-01-20 19:50:48,896 - mmdet - INFO - Epoch [5][950/1286]	lr: 5.000e-03, eta: 1:30:35, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0080, loss_rpn_cls: 0.0193, loss_rpn_bbox: 0.0486, loss_cls: 0.1687, acc: 92.9326, loss_bbox: 0.3279, loss: 0.7291
2023-01-20 19:51:20,262 - mmdet - INFO - Epoch [5][1000/1286]	lr: 5.000e-03, eta: 1:30:10, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0088, loss_rpn_cls: 0.0191, loss_rpn_bbox: 0.0470, loss_cls: 0.1705, acc: 92.9307, loss_bbox: 0.3280, loss: 0.7301
2023-01-20 19:51:51,398 - mmdet - INFO - Epoch [5][1050/1286]	lr: 5.000e-03, eta: 1:29:43, time: 0.623, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0069, loss_rpn_cls: 0.0150, loss_rpn_bbox: 0.0404, loss_cls: 0.1459, acc: 94.0352, loss_bbox: 0.2770, loss: 0.6417
2023-01-20 19:52:22,756 - mmdet - INFO - Epoch [5][1100/1286]	lr: 5.000e-03, eta: 1:29:18, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1580, mask_loss: 0.0072, loss_rpn_cls: 0.0150, loss_rpn_bbox: 0.0422, loss_cls: 0.1551, acc: 93.4873, loss_bbox: 0.3041, loss: 0.6816
2023-01-20 19:52:53,918 - mmdet - INFO - Epoch [5][1150/1286]	lr: 5.000e-03, eta: 1:28:51, time: 0.623, data_time: 0.006, memory: 5992, i_loss: 0.1569, mask_loss: 0.0077, loss_rpn_cls: 0.0168, loss_rpn_bbox: 0.0472, loss_cls: 0.1696, acc: 92.9600, loss_bbox: 0.3218, loss: 0.7200
2023-01-20 19:53:25,158 - mmdet - INFO - Epoch [5][1200/1286]	lr: 5.000e-03, eta: 1:28:25, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1581, mask_loss: 0.0077, loss_rpn_cls: 0.0201, loss_rpn_bbox: 0.0480, loss_cls: 0.1588, acc: 93.4941, loss_bbox: 0.3042, loss: 0.6969
2023-01-20 19:53:56,373 - mmdet - INFO - Epoch [5][1250/1286]	lr: 5.000e-03, eta: 1:27:59, time: 0.624, data_time: 0.006, memory: 5992, i_loss: 0.1568, mask_loss: 0.0071, loss_rpn_cls: 0.0177, loss_rpn_bbox: 0.0427, loss_cls: 0.1687, acc: 93.0107, loss_bbox: 0.3294, loss: 0.7223
2023-01-20 19:54:52,392 - mmdet - INFO - Epoch [6][50/1286]	lr: 5.000e-03, eta: 1:26:45, time: 0.670, data_time: 0.051, memory: 5992, i_loss: 0.1567, mask_loss: 0.0064, loss_rpn_cls: 0.0136, loss_rpn_bbox: 0.0403, loss_cls: 0.1551, acc: 93.5068, loss_bbox: 0.3042, loss: 0.6762
2023-01-20 19:55:23,700 - mmdet - INFO - Epoch [6][100/1286]	lr: 5.000e-03, eta: 1:26:19, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0073, loss_rpn_cls: 0.0158, loss_rpn_bbox: 0.0441, loss_cls: 0.1536, acc: 93.5771, loss_bbox: 0.3066, loss: 0.6841
2023-01-20 19:55:54,905 - mmdet - INFO - Epoch [6][150/1286]	lr: 5.000e-03, eta: 1:25:53, time: 0.624, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0080, loss_rpn_cls: 0.0140, loss_rpn_bbox: 0.0442, loss_cls: 0.1643, acc: 93.0498, loss_bbox: 0.3266, loss: 0.7137
2023-01-20 19:56:26,241 - mmdet - INFO - Epoch [6][200/1286]	lr: 5.000e-03, eta: 1:25:27, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0073, loss_rpn_cls: 0.0163, loss_rpn_bbox: 0.0427, loss_cls: 0.1506, acc: 93.6582, loss_bbox: 0.3043, loss: 0.6778
2023-01-20 19:56:57,670 - mmdet - INFO - Epoch [6][250/1286]	lr: 5.000e-03, eta: 1:25:01, time: 0.629, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0069, loss_rpn_cls: 0.0147, loss_rpn_bbox: 0.0436, loss_cls: 0.1605, acc: 93.1904, loss_bbox: 0.3156, loss: 0.6979
2023-01-20 19:57:28,903 - mmdet - INFO - Epoch [6][300/1286]	lr: 5.000e-03, eta: 1:24:34, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0070, loss_rpn_cls: 0.0149, loss_rpn_bbox: 0.0411, loss_cls: 0.1528, acc: 93.6104, loss_bbox: 0.3040, loss: 0.6765
2023-01-20 19:58:00,210 - mmdet - INFO - Epoch [6][350/1286]	lr: 5.000e-03, eta: 1:24:08, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0072, loss_rpn_cls: 0.0159, loss_rpn_bbox: 0.0456, loss_cls: 0.1679, acc: 93.0010, loss_bbox: 0.3290, loss: 0.7222
2023-01-20 19:58:31,510 - mmdet - INFO - Epoch [6][400/1286]	lr: 5.000e-03, eta: 1:23:42, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0082, loss_rpn_cls: 0.0142, loss_rpn_bbox: 0.0424, loss_cls: 0.1555, acc: 93.4912, loss_bbox: 0.3151, loss: 0.6921
2023-01-20 19:59:02,788 - mmdet - INFO - Epoch [6][450/1286]	lr: 5.000e-03, eta: 1:23:15, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0078, loss_rpn_cls: 0.0165, loss_rpn_bbox: 0.0426, loss_cls: 0.1504, acc: 93.7070, loss_bbox: 0.2891, loss: 0.6630
2023-01-20 19:59:34,063 - mmdet - INFO - Epoch [6][500/1286]	lr: 5.000e-03, eta: 1:22:48, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0082, loss_rpn_cls: 0.0174, loss_rpn_bbox: 0.0449, loss_cls: 0.1568, acc: 93.2354, loss_bbox: 0.3110, loss: 0.6951
2023-01-20 20:00:05,348 - mmdet - INFO - Epoch [6][550/1286]	lr: 5.000e-03, eta: 1:22:22, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0071, loss_rpn_cls: 0.0160, loss_rpn_bbox: 0.0423, loss_cls: 0.1462, acc: 93.8057, loss_bbox: 0.2893, loss: 0.6577
2023-01-20 20:00:36,726 - mmdet - INFO - Epoch [6][600/1286]	lr: 5.000e-03, eta: 1:21:55, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0072, loss_rpn_cls: 0.0138, loss_rpn_bbox: 0.0454, loss_cls: 0.1591, acc: 93.2275, loss_bbox: 0.3143, loss: 0.6964
2023-01-20 20:01:08,107 - mmdet - INFO - Epoch [6][650/1286]	lr: 5.000e-03, eta: 1:21:28, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0085, loss_rpn_cls: 0.0160, loss_rpn_bbox: 0.0436, loss_cls: 0.1546, acc: 93.4492, loss_bbox: 0.3125, loss: 0.6918
2023-01-20 20:01:39,477 - mmdet - INFO - Epoch [6][700/1286]	lr: 5.000e-03, eta: 1:21:01, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0081, loss_rpn_cls: 0.0179, loss_rpn_bbox: 0.0453, loss_cls: 0.1655, acc: 93.1318, loss_bbox: 0.3279, loss: 0.7213
2023-01-20 20:02:10,702 - mmdet - INFO - Epoch [6][750/1286]	lr: 5.000e-03, eta: 1:20:34, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0075, loss_rpn_cls: 0.0147, loss_rpn_bbox: 0.0406, loss_cls: 0.1587, acc: 93.2412, loss_bbox: 0.3174, loss: 0.6956
2023-01-20 20:02:41,876 - mmdet - INFO - Epoch [6][800/1286]	lr: 5.000e-03, eta: 1:20:07, time: 0.623, data_time: 0.006, memory: 5992, i_loss: 0.1592, mask_loss: 0.0077, loss_rpn_cls: 0.0140, loss_rpn_bbox: 0.0424, loss_cls: 0.1612, acc: 93.3877, loss_bbox: 0.3108, loss: 0.6953
2023-01-20 20:03:13,063 - mmdet - INFO - Epoch [6][850/1286]	lr: 5.000e-03, eta: 1:19:40, time: 0.624, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0073, loss_rpn_cls: 0.0165, loss_rpn_bbox: 0.0459, loss_cls: 0.1586, acc: 93.3516, loss_bbox: 0.3082, loss: 0.6931
2023-01-20 20:03:38,304 - mmdet - INFO - Epoch [6][900/1286]	lr: 5.000e-03, eta: 1:19:06, time: 0.505, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0076, loss_rpn_cls: 0.0153, loss_rpn_bbox: 0.0458, loss_cls: 0.1611, acc: 93.1670, loss_bbox: 0.3182, loss: 0.7047
2023-01-20 20:04:06,791 - mmdet - INFO - Epoch [6][950/1286]	lr: 5.000e-03, eta: 1:18:36, time: 0.570, data_time: 0.005, memory: 5992, i_loss: 0.1566, mask_loss: 0.0080, loss_rpn_cls: 0.0175, loss_rpn_bbox: 0.0417, loss_cls: 0.1565, acc: 93.4912, loss_bbox: 0.3090, loss: 0.6894
2023-01-20 20:04:34,626 - mmdet - INFO - Epoch [6][1000/1286]	lr: 5.000e-03, eta: 1:18:05, time: 0.557, data_time: 0.005, memory: 5992, i_loss: 0.1566, mask_loss: 0.0077, loss_rpn_cls: 0.0158, loss_rpn_bbox: 0.0418, loss_cls: 0.1538, acc: 93.5225, loss_bbox: 0.3129, loss: 0.6887
2023-01-20 20:04:57,935 - mmdet - INFO - Epoch [6][1050/1286]	lr: 5.000e-03, eta: 1:17:29, time: 0.466, data_time: 0.005, memory: 5992, i_loss: 0.1566, mask_loss: 0.0078, loss_rpn_cls: 0.0161, loss_rpn_bbox: 0.0449, loss_cls: 0.1560, acc: 93.4434, loss_bbox: 0.3107, loss: 0.6922
2023-01-20 20:05:29,293 - mmdet - INFO - Epoch [6][1100/1286]	lr: 5.000e-03, eta: 1:17:02, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0076, loss_rpn_cls: 0.0163, loss_rpn_bbox: 0.0437, loss_cls: 0.1585, acc: 93.2617, loss_bbox: 0.3167, loss: 0.6993
2023-01-20 20:06:00,596 - mmdet - INFO - Epoch [6][1150/1286]	lr: 5.000e-03, eta: 1:16:35, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0072, loss_rpn_cls: 0.0153, loss_rpn_bbox: 0.0414, loss_cls: 0.1487, acc: 93.7969, loss_bbox: 0.2958, loss: 0.6650
2023-01-20 20:06:31,871 - mmdet - INFO - Epoch [6][1200/1286]	lr: 5.000e-03, eta: 1:16:08, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0075, loss_rpn_cls: 0.0178, loss_rpn_bbox: 0.0484, loss_cls: 0.1675, acc: 92.9766, loss_bbox: 0.3217, loss: 0.7196
2023-01-20 20:07:03,150 - mmdet - INFO - Epoch [6][1250/1286]	lr: 5.000e-03, eta: 1:15:41, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0073, loss_rpn_cls: 0.0168, loss_rpn_bbox: 0.0466, loss_cls: 0.1581, acc: 93.3115, loss_bbox: 0.3197, loss: 0.7052
2023-01-20 20:07:25,728 - mmdet - INFO - Saving checkpoint at 6 epochs
2023-01-20 20:08:47,738 - mmdet - INFO - Evaluating bbox...
2023-01-20 20:08:51,419 - mmdet - INFO - 
+----------+--------+----------+--------+----------+--------+
| category | AP50   | category | AP50   | category | AP50   |
+----------+--------+----------+--------+----------+--------+
| car      | 0.9344 | person   | 0.8905 | bicycle  | 0.8666 |
| dog      | 0.6150 | None     | None   | None     | None   |
+----------+--------+----------+--------+----------+--------+
2023-01-20 20:08:51,419 - mmdet - INFO - 
+----------+--------+----------+--------+----------+--------+
| category | AP     | category | AP     | category | AP     |
+----------+--------+----------+--------+----------+--------+
| car      | 0.5997 | person   | 0.4545 | bicycle  | 0.3739 |
| dog      | 0.2561 | None     | None   | None     | None   |
+----------+--------+----------+--------+----------+--------+
2023-01-20 20:08:51,444 - mmdet - INFO - Exp name: faster_rcnn_r50_fpn_tinet_flir2.py
2023-01-20 20:08:51,444 - mmdet - INFO - Epoch(val) [6][1013]	bbox_mAP: 0.4210, bbox_mAP_50: 0.8266, bbox_mAP_75: 0.3310, bbox_mAP_s: 0.2945, bbox_mAP_m: 0.4819, bbox_mAP_l: 0.6257, bbox_mAP_copypaste: 0.4210 0.8266 0.3310 0.2945 0.4819 0.6257
2023-01-20 20:09:24,901 - mmdet - INFO - Epoch [7][50/1286]	lr: 5.000e-03, eta: 1:14:34, time: 0.669, data_time: 0.051, memory: 5992, i_loss: 0.1566, mask_loss: 0.0071, loss_rpn_cls: 0.0147, loss_rpn_bbox: 0.0392, loss_cls: 0.1393, acc: 94.1318, loss_bbox: 0.2799, loss: 0.6369
2023-01-20 20:09:56,204 - mmdet - INFO - Epoch [7][100/1286]	lr: 5.000e-03, eta: 1:14:07, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0068, loss_rpn_cls: 0.0148, loss_rpn_bbox: 0.0451, loss_cls: 0.1596, acc: 93.3213, loss_bbox: 0.3150, loss: 0.6979
2023-01-20 20:10:27,622 - mmdet - INFO - Epoch [7][150/1286]	lr: 5.000e-03, eta: 1:13:40, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1593, mask_loss: 0.0083, loss_rpn_cls: 0.0147, loss_rpn_bbox: 0.0444, loss_cls: 0.1492, acc: 93.8516, loss_bbox: 0.3066, loss: 0.6826
2023-01-20 20:10:58,858 - mmdet - INFO - Epoch [7][200/1286]	lr: 5.000e-03, eta: 1:13:12, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0072, loss_rpn_cls: 0.0131, loss_rpn_bbox: 0.0425, loss_cls: 0.1503, acc: 93.6504, loss_bbox: 0.3006, loss: 0.6703
2023-01-20 20:11:30,141 - mmdet - INFO - Epoch [7][250/1286]	lr: 5.000e-03, eta: 1:12:45, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0075, loss_rpn_cls: 0.0131, loss_rpn_bbox: 0.0420, loss_cls: 0.1478, acc: 93.7764, loss_bbox: 0.3050, loss: 0.6721
2023-01-20 20:12:01,479 - mmdet - INFO - Epoch [7][300/1286]	lr: 5.000e-03, eta: 1:12:18, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0067, loss_rpn_cls: 0.0128, loss_rpn_bbox: 0.0407, loss_cls: 0.1459, acc: 93.9590, loss_bbox: 0.2926, loss: 0.6554
2023-01-20 20:12:32,696 - mmdet - INFO - Epoch [7][350/1286]	lr: 5.000e-03, eta: 1:11:50, time: 0.624, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0075, loss_rpn_cls: 0.0137, loss_rpn_bbox: 0.0409, loss_cls: 0.1453, acc: 93.8760, loss_bbox: 0.2930, loss: 0.6570
2023-01-20 20:13:03,855 - mmdet - INFO - Epoch [7][400/1286]	lr: 5.000e-03, eta: 1:11:23, time: 0.623, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0069, loss_rpn_cls: 0.0130, loss_rpn_bbox: 0.0395, loss_cls: 0.1406, acc: 94.0996, loss_bbox: 0.2905, loss: 0.6471
2023-01-20 20:13:35,098 - mmdet - INFO - Epoch [7][450/1286]	lr: 5.000e-03, eta: 1:10:55, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0065, loss_rpn_cls: 0.0139, loss_rpn_bbox: 0.0439, loss_cls: 0.1496, acc: 93.6221, loss_bbox: 0.3028, loss: 0.6734
2023-01-20 20:14:06,312 - mmdet - INFO - Epoch [7][500/1286]	lr: 5.000e-03, eta: 1:10:28, time: 0.624, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0070, loss_rpn_cls: 0.0127, loss_rpn_bbox: 0.0434, loss_cls: 0.1565, acc: 93.3008, loss_bbox: 0.3192, loss: 0.6956
2023-01-20 20:14:37,604 - mmdet - INFO - Epoch [7][550/1286]	lr: 5.000e-03, eta: 1:10:00, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0073, loss_rpn_cls: 0.0149, loss_rpn_bbox: 0.0415, loss_cls: 0.1431, acc: 94.0039, loss_bbox: 0.3011, loss: 0.6646
2023-01-20 20:15:08,944 - mmdet - INFO - Epoch [7][600/1286]	lr: 5.000e-03, eta: 1:09:32, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0081, loss_rpn_cls: 0.0168, loss_rpn_bbox: 0.0482, loss_cls: 0.1610, acc: 93.1953, loss_bbox: 0.3215, loss: 0.7123
2023-01-20 20:15:40,246 - mmdet - INFO - Epoch [7][650/1286]	lr: 5.000e-03, eta: 1:09:05, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0068, loss_rpn_cls: 0.0163, loss_rpn_bbox: 0.0470, loss_cls: 0.1614, acc: 93.2461, loss_bbox: 0.3109, loss: 0.6992
2023-01-20 20:16:11,728 - mmdet - INFO - Epoch [7][700/1286]	lr: 5.000e-03, eta: 1:08:37, time: 0.630, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0073, loss_rpn_cls: 0.0121, loss_rpn_bbox: 0.0406, loss_cls: 0.1463, acc: 93.6865, loss_bbox: 0.2958, loss: 0.6589
2023-01-20 20:16:42,959 - mmdet - INFO - Epoch [7][750/1286]	lr: 5.000e-03, eta: 1:08:09, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0067, loss_rpn_cls: 0.0113, loss_rpn_bbox: 0.0385, loss_cls: 0.1432, acc: 94.0781, loss_bbox: 0.2811, loss: 0.6375
2023-01-20 20:17:14,322 - mmdet - INFO - Epoch [7][800/1286]	lr: 5.000e-03, eta: 1:07:42, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0065, loss_rpn_cls: 0.0137, loss_rpn_bbox: 0.0405, loss_cls: 0.1508, acc: 93.5977, loss_bbox: 0.3144, loss: 0.6826
2023-01-20 20:17:45,617 - mmdet - INFO - Epoch [7][850/1286]	lr: 5.000e-03, eta: 1:07:14, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0061, loss_rpn_cls: 0.0122, loss_rpn_bbox: 0.0380, loss_cls: 0.1420, acc: 94.0068, loss_bbox: 0.2932, loss: 0.6482
2023-01-20 20:18:11,530 - mmdet - INFO - Epoch [7][900/1286]	lr: 5.000e-03, eta: 1:06:42, time: 0.518, data_time: 0.005, memory: 5992, i_loss: 0.1566, mask_loss: 0.0067, loss_rpn_cls: 0.0137, loss_rpn_bbox: 0.0404, loss_cls: 0.1512, acc: 93.6426, loss_bbox: 0.3066, loss: 0.6753
2023-01-20 20:18:40,280 - mmdet - INFO - Epoch [7][950/1286]	lr: 5.000e-03, eta: 1:06:12, time: 0.575, data_time: 0.005, memory: 5992, i_loss: 0.1566, mask_loss: 0.0073, loss_rpn_cls: 0.0121, loss_rpn_bbox: 0.0433, loss_cls: 0.1546, acc: 93.5088, loss_bbox: 0.3121, loss: 0.6861
2023-01-20 20:19:08,967 - mmdet - INFO - Epoch [7][1000/1286]	lr: 5.000e-03, eta: 1:05:42, time: 0.574, data_time: 0.005, memory: 5992, i_loss: 0.1567, mask_loss: 0.0071, loss_rpn_cls: 0.0124, loss_rpn_bbox: 0.0418, loss_cls: 0.1497, acc: 93.6699, loss_bbox: 0.2991, loss: 0.6667
2023-01-20 20:19:32,869 - mmdet - INFO - Epoch [7][1050/1286]	lr: 5.000e-03, eta: 1:05:09, time: 0.478, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0071, loss_rpn_cls: 0.0125, loss_rpn_bbox: 0.0374, loss_cls: 0.1388, acc: 94.0811, loss_bbox: 0.2807, loss: 0.6331
2023-01-20 20:20:04,162 - mmdet - INFO - Epoch [7][1100/1286]	lr: 5.000e-03, eta: 1:04:41, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0079, loss_rpn_cls: 0.0163, loss_rpn_bbox: 0.0473, loss_cls: 0.1594, acc: 93.3428, loss_bbox: 0.3182, loss: 0.7058
2023-01-20 20:20:35,437 - mmdet - INFO - Epoch [7][1150/1286]	lr: 5.000e-03, eta: 1:04:13, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0072, loss_rpn_cls: 0.0127, loss_rpn_bbox: 0.0439, loss_cls: 0.1504, acc: 93.7168, loss_bbox: 0.2933, loss: 0.6642
2023-01-20 20:21:06,697 - mmdet - INFO - Epoch [7][1200/1286]	lr: 5.000e-03, eta: 1:03:45, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0072, loss_rpn_cls: 0.0175, loss_rpn_bbox: 0.0418, loss_cls: 0.1552, acc: 93.6025, loss_bbox: 0.3084, loss: 0.6869
2023-01-20 20:21:37,948 - mmdet - INFO - Epoch [7][1250/1286]	lr: 5.000e-03, eta: 1:03:17, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1568, mask_loss: 0.0078, loss_rpn_cls: 0.0153, loss_rpn_bbox: 0.0402, loss_cls: 0.1468, acc: 93.8623, loss_bbox: 0.2889, loss: 0.6557
2023-01-20 20:22:34,062 - mmdet - INFO - Epoch [8][50/1286]	lr: 5.000e-03, eta: 1:02:14, time: 0.669, data_time: 0.051, memory: 5992, i_loss: 0.1566, mask_loss: 0.0082, loss_rpn_cls: 0.0120, loss_rpn_bbox: 0.0385, loss_cls: 0.1426, acc: 94.0244, loss_bbox: 0.2922, loss: 0.6501
2023-01-20 20:23:05,390 - mmdet - INFO - Epoch [8][100/1286]	lr: 5.000e-03, eta: 1:01:47, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0070, loss_rpn_cls: 0.0142, loss_rpn_bbox: 0.0423, loss_cls: 0.1461, acc: 93.9492, loss_bbox: 0.3042, loss: 0.6703
2023-01-20 20:23:36,794 - mmdet - INFO - Epoch [8][150/1286]	lr: 5.000e-03, eta: 1:01:19, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0071, loss_rpn_cls: 0.0149, loss_rpn_bbox: 0.0414, loss_cls: 0.1455, acc: 93.8057, loss_bbox: 0.3008, loss: 0.6663
2023-01-20 20:24:08,135 - mmdet - INFO - Epoch [8][200/1286]	lr: 5.000e-03, eta: 1:00:51, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0070, loss_rpn_cls: 0.0140, loss_rpn_bbox: 0.0428, loss_cls: 0.1447, acc: 93.9404, loss_bbox: 0.2983, loss: 0.6634
2023-01-20 20:24:39,391 - mmdet - INFO - Epoch [8][250/1286]	lr: 5.000e-03, eta: 1:00:23, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0065, loss_rpn_cls: 0.0140, loss_rpn_bbox: 0.0414, loss_cls: 0.1449, acc: 93.8926, loss_bbox: 0.2979, loss: 0.6614
2023-01-20 20:25:10,677 - mmdet - INFO - Epoch [8][300/1286]	lr: 5.000e-03, eta: 0:59:55, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0069, loss_rpn_cls: 0.0117, loss_rpn_bbox: 0.0352, loss_cls: 0.1285, acc: 94.5830, loss_bbox: 0.2677, loss: 0.6067
2023-01-20 20:25:41,934 - mmdet - INFO - Epoch [8][350/1286]	lr: 5.000e-03, eta: 0:59:27, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0061, loss_rpn_cls: 0.0134, loss_rpn_bbox: 0.0370, loss_cls: 0.1311, acc: 94.4785, loss_bbox: 0.2693, loss: 0.6136
2023-01-20 20:26:13,210 - mmdet - INFO - Epoch [8][400/1286]	lr: 5.000e-03, eta: 0:58:59, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0069, loss_rpn_cls: 0.0146, loss_rpn_bbox: 0.0409, loss_cls: 0.1469, acc: 93.7900, loss_bbox: 0.2977, loss: 0.6636
2023-01-20 20:26:44,559 - mmdet - INFO - Epoch [8][450/1286]	lr: 5.000e-03, eta: 0:58:31, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0074, loss_rpn_cls: 0.0148, loss_rpn_bbox: 0.0452, loss_cls: 0.1496, acc: 93.7383, loss_bbox: 0.3040, loss: 0.6776
2023-01-20 20:27:15,776 - mmdet - INFO - Epoch [8][500/1286]	lr: 5.000e-03, eta: 0:58:02, time: 0.624, data_time: 0.006, memory: 5992, i_loss: 0.1579, mask_loss: 0.0071, loss_rpn_cls: 0.0132, loss_rpn_bbox: 0.0385, loss_cls: 0.1351, acc: 94.2422, loss_bbox: 0.2800, loss: 0.6318
2023-01-20 20:27:47,076 - mmdet - INFO - Epoch [8][550/1286]	lr: 5.000e-03, eta: 0:57:34, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1570, mask_loss: 0.0082, loss_rpn_cls: 0.0121, loss_rpn_bbox: 0.0415, loss_cls: 0.1408, acc: 94.0215, loss_bbox: 0.2917, loss: 0.6513
2023-01-20 20:28:18,398 - mmdet - INFO - Epoch [8][600/1286]	lr: 5.000e-03, eta: 0:57:06, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1568, mask_loss: 0.0074, loss_rpn_cls: 0.0146, loss_rpn_bbox: 0.0454, loss_cls: 0.1488, acc: 93.8076, loss_bbox: 0.3086, loss: 0.6816
2023-01-20 20:28:49,692 - mmdet - INFO - Epoch [8][650/1286]	lr: 5.000e-03, eta: 0:56:38, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1570, mask_loss: 0.0064, loss_rpn_cls: 0.0119, loss_rpn_bbox: 0.0415, loss_cls: 0.1407, acc: 94.1709, loss_bbox: 0.2866, loss: 0.6441
2023-01-20 20:29:20,858 - mmdet - INFO - Epoch [8][700/1286]	lr: 5.000e-03, eta: 0:56:09, time: 0.623, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0072, loss_rpn_cls: 0.0109, loss_rpn_bbox: 0.0382, loss_cls: 0.1390, acc: 94.1445, loss_bbox: 0.2858, loss: 0.6377
2023-01-20 20:29:52,243 - mmdet - INFO - Epoch [8][750/1286]	lr: 5.000e-03, eta: 0:55:41, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1568, mask_loss: 0.0072, loss_rpn_cls: 0.0138, loss_rpn_bbox: 0.0400, loss_cls: 0.1407, acc: 94.0635, loss_bbox: 0.2824, loss: 0.6408
2023-01-20 20:30:23,495 - mmdet - INFO - Epoch [8][800/1286]	lr: 5.000e-03, eta: 0:55:13, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0062, loss_rpn_cls: 0.0136, loss_rpn_bbox: 0.0393, loss_cls: 0.1408, acc: 94.0596, loss_bbox: 0.2863, loss: 0.6428
2023-01-20 20:30:54,696 - mmdet - INFO - Epoch [8][850/1286]	lr: 5.000e-03, eta: 0:54:44, time: 0.624, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0064, loss_rpn_cls: 0.0113, loss_rpn_bbox: 0.0372, loss_cls: 0.1340, acc: 94.3193, loss_bbox: 0.2748, loss: 0.6204
2023-01-20 20:31:26,108 - mmdet - INFO - Epoch [8][900/1286]	lr: 5.000e-03, eta: 0:54:16, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0072, loss_rpn_cls: 0.0133, loss_rpn_bbox: 0.0472, loss_cls: 0.1485, acc: 93.6758, loss_bbox: 0.3089, loss: 0.6817
2023-01-20 20:31:57,388 - mmdet - INFO - Epoch [8][950/1286]	lr: 5.000e-03, eta: 0:53:48, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0064, loss_rpn_cls: 0.0141, loss_rpn_bbox: 0.0406, loss_cls: 0.1443, acc: 93.8887, loss_bbox: 0.2946, loss: 0.6567
2023-01-20 20:32:28,671 - mmdet - INFO - Epoch [8][1000/1286]	lr: 5.000e-03, eta: 0:53:19, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0075, loss_rpn_cls: 0.0131, loss_rpn_bbox: 0.0402, loss_cls: 0.1508, acc: 93.6562, loss_bbox: 0.3035, loss: 0.6717
2023-01-20 20:32:54,628 - mmdet - INFO - Epoch [8][1050/1286]	lr: 5.000e-03, eta: 0:52:48, time: 0.519, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0064, loss_rpn_cls: 0.0136, loss_rpn_bbox: 0.0409, loss_cls: 0.1465, acc: 93.8525, loss_bbox: 0.2987, loss: 0.6627
2023-01-20 20:33:23,905 - mmdet - INFO - Epoch [8][1100/1286]	lr: 5.000e-03, eta: 0:52:18, time: 0.586, data_time: 0.005, memory: 5992, i_loss: 0.1591, mask_loss: 0.0069, loss_rpn_cls: 0.0115, loss_rpn_bbox: 0.0398, loss_cls: 0.1449, acc: 93.8555, loss_bbox: 0.2904, loss: 0.6526
2023-01-20 20:33:52,878 - mmdet - INFO - Epoch [8][1150/1286]	lr: 5.000e-03, eta: 0:51:49, time: 0.579, data_time: 0.005, memory: 5992, i_loss: 0.1566, mask_loss: 0.0064, loss_rpn_cls: 0.0129, loss_rpn_bbox: 0.0415, loss_cls: 0.1394, acc: 94.1035, loss_bbox: 0.2900, loss: 0.6468
2023-01-20 20:34:17,085 - mmdet - INFO - Epoch [8][1200/1286]	lr: 5.000e-03, eta: 0:51:16, time: 0.484, data_time: 0.005, memory: 5992, i_loss: 0.1567, mask_loss: 0.0074, loss_rpn_cls: 0.0123, loss_rpn_bbox: 0.0416, loss_cls: 0.1401, acc: 94.1572, loss_bbox: 0.2875, loss: 0.6456
2023-01-20 20:34:48,335 - mmdet - INFO - Epoch [8][1250/1286]	lr: 5.000e-03, eta: 0:50:48, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0066, loss_rpn_cls: 0.0126, loss_rpn_bbox: 0.0388, loss_cls: 0.1409, acc: 94.1074, loss_bbox: 0.2885, loss: 0.6441
2023-01-20 20:35:44,346 - mmdet - INFO - Epoch [9][50/1286]	lr: 5.000e-04, eta: 0:49:49, time: 0.668, data_time: 0.051, memory: 5992, i_loss: 0.1566, mask_loss: 0.0064, loss_rpn_cls: 0.0108, loss_rpn_bbox: 0.0400, loss_cls: 0.1358, acc: 94.2881, loss_bbox: 0.2780, loss: 0.6278
2023-01-20 20:36:15,649 - mmdet - INFO - Epoch [9][100/1286]	lr: 5.000e-04, eta: 0:49:20, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0066, loss_rpn_cls: 0.0107, loss_rpn_bbox: 0.0382, loss_cls: 0.1263, acc: 94.6475, loss_bbox: 0.2604, loss: 0.5988
2023-01-20 20:36:46,981 - mmdet - INFO - Epoch [9][150/1286]	lr: 5.000e-04, eta: 0:48:52, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0063, loss_rpn_cls: 0.0107, loss_rpn_bbox: 0.0364, loss_cls: 0.1280, acc: 94.5771, loss_bbox: 0.2672, loss: 0.6051
2023-01-20 20:37:18,244 - mmdet - INFO - Epoch [9][200/1286]	lr: 5.000e-04, eta: 0:48:24, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0060, loss_rpn_cls: 0.0095, loss_rpn_bbox: 0.0349, loss_cls: 0.1214, acc: 94.8955, loss_bbox: 0.2586, loss: 0.5872
2023-01-20 20:37:49,491 - mmdet - INFO - Epoch [9][250/1286]	lr: 5.000e-04, eta: 0:47:55, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0065, loss_rpn_cls: 0.0103, loss_rpn_bbox: 0.0378, loss_cls: 0.1292, acc: 94.5723, loss_bbox: 0.2744, loss: 0.6149
2023-01-20 20:38:20,706 - mmdet - INFO - Epoch [9][300/1286]	lr: 5.000e-04, eta: 0:47:27, time: 0.624, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0061, loss_rpn_cls: 0.0088, loss_rpn_bbox: 0.0333, loss_cls: 0.1161, acc: 95.2148, loss_bbox: 0.2495, loss: 0.5705
2023-01-20 20:38:51,942 - mmdet - INFO - Epoch [9][350/1286]	lr: 5.000e-04, eta: 0:46:58, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0055, loss_rpn_cls: 0.0092, loss_rpn_bbox: 0.0325, loss_cls: 0.1188, acc: 94.9688, loss_bbox: 0.2545, loss: 0.5771
2023-01-20 20:39:23,278 - mmdet - INFO - Epoch [9][400/1286]	lr: 5.000e-04, eta: 0:46:29, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1572, mask_loss: 0.0069, loss_rpn_cls: 0.0087, loss_rpn_bbox: 0.0362, loss_cls: 0.1292, acc: 94.4854, loss_bbox: 0.2692, loss: 0.6074
2023-01-20 20:39:54,530 - mmdet - INFO - Epoch [9][450/1286]	lr: 5.000e-04, eta: 0:46:01, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0057, loss_rpn_cls: 0.0089, loss_rpn_bbox: 0.0320, loss_cls: 0.1168, acc: 95.0127, loss_bbox: 0.2500, loss: 0.5701
2023-01-20 20:40:25,779 - mmdet - INFO - Epoch [9][500/1286]	lr: 5.000e-04, eta: 0:45:32, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0061, loss_rpn_cls: 0.0099, loss_rpn_bbox: 0.0343, loss_cls: 0.1238, acc: 94.8105, loss_bbox: 0.2631, loss: 0.5939
2023-01-20 20:40:57,078 - mmdet - INFO - Epoch [9][550/1286]	lr: 5.000e-04, eta: 0:45:04, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0061, loss_rpn_cls: 0.0096, loss_rpn_bbox: 0.0341, loss_cls: 0.1144, acc: 95.1250, loss_bbox: 0.2467, loss: 0.5675
2023-01-20 20:41:28,398 - mmdet - INFO - Epoch [9][600/1286]	lr: 5.000e-04, eta: 0:44:35, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0055, loss_rpn_cls: 0.0091, loss_rpn_bbox: 0.0340, loss_cls: 0.1173, acc: 95.0879, loss_bbox: 0.2506, loss: 0.5732
2023-01-20 20:41:59,776 - mmdet - INFO - Epoch [9][650/1286]	lr: 5.000e-04, eta: 0:44:06, time: 0.628, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0061, loss_rpn_cls: 0.0100, loss_rpn_bbox: 0.0390, loss_cls: 0.1255, acc: 94.7295, loss_bbox: 0.2711, loss: 0.6083
2023-01-20 20:42:31,110 - mmdet - INFO - Epoch [9][700/1286]	lr: 5.000e-04, eta: 0:43:38, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0056, loss_rpn_cls: 0.0096, loss_rpn_bbox: 0.0346, loss_cls: 0.1166, acc: 95.0830, loss_bbox: 0.2538, loss: 0.5768
2023-01-20 20:43:02,659 - mmdet - INFO - Epoch [9][750/1286]	lr: 5.000e-04, eta: 0:43:09, time: 0.631, data_time: 0.006, memory: 5992, i_loss: 0.1591, mask_loss: 0.0060, loss_rpn_cls: 0.0086, loss_rpn_bbox: 0.0328, loss_cls: 0.1152, acc: 95.1885, loss_bbox: 0.2447, loss: 0.5663
2023-01-20 20:43:34,032 - mmdet - INFO - Epoch [9][800/1286]	lr: 5.000e-04, eta: 0:42:40, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0065, loss_rpn_cls: 0.0090, loss_rpn_bbox: 0.0337, loss_cls: 0.1169, acc: 95.0303, loss_bbox: 0.2565, loss: 0.5793
2023-01-20 20:44:05,343 - mmdet - INFO - Epoch [9][850/1286]	lr: 5.000e-04, eta: 0:42:12, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0060, loss_rpn_cls: 0.0087, loss_rpn_bbox: 0.0340, loss_cls: 0.1184, acc: 95.0693, loss_bbox: 0.2557, loss: 0.5795
2023-01-20 20:44:36,625 - mmdet - INFO - Epoch [9][900/1286]	lr: 5.000e-04, eta: 0:41:43, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0060, loss_rpn_cls: 0.0091, loss_rpn_bbox: 0.0367, loss_cls: 0.1191, acc: 95.0078, loss_bbox: 0.2554, loss: 0.5829
2023-01-20 20:45:07,898 - mmdet - INFO - Epoch [9][950/1286]	lr: 5.000e-04, eta: 0:41:14, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0056, loss_rpn_cls: 0.0092, loss_rpn_bbox: 0.0355, loss_cls: 0.1143, acc: 95.2168, loss_bbox: 0.2408, loss: 0.5622
2023-01-20 20:45:39,132 - mmdet - INFO - Epoch [9][1000/1286]	lr: 5.000e-04, eta: 0:40:45, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0058, loss_rpn_cls: 0.0110, loss_rpn_bbox: 0.0346, loss_cls: 0.1240, acc: 94.7480, loss_bbox: 0.2610, loss: 0.5930
2023-01-20 20:46:10,471 - mmdet - INFO - Epoch [9][1050/1286]	lr: 5.000e-04, eta: 0:40:16, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0066, loss_rpn_cls: 0.0108, loss_rpn_bbox: 0.0397, loss_cls: 0.1286, acc: 94.5879, loss_bbox: 0.2709, loss: 0.6133
2023-01-20 20:46:41,796 - mmdet - INFO - Epoch [9][1100/1286]	lr: 5.000e-04, eta: 0:39:47, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0058, loss_rpn_cls: 0.0095, loss_rpn_bbox: 0.0339, loss_cls: 0.1190, acc: 94.9854, loss_bbox: 0.2566, loss: 0.5815
2023-01-20 20:47:12,993 - mmdet - INFO - Epoch [9][1150/1286]	lr: 5.000e-04, eta: 0:39:18, time: 0.624, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0057, loss_rpn_cls: 0.0084, loss_rpn_bbox: 0.0353, loss_cls: 0.1193, acc: 94.9961, loss_bbox: 0.2529, loss: 0.5783
2023-01-20 20:47:39,436 - mmdet - INFO - Epoch [9][1200/1286]	lr: 5.000e-04, eta: 0:38:48, time: 0.529, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0062, loss_rpn_cls: 0.0083, loss_rpn_bbox: 0.0357, loss_cls: 0.1206, acc: 94.9492, loss_bbox: 0.2585, loss: 0.5859
2023-01-20 20:48:07,756 - mmdet - INFO - Epoch [9][1250/1286]	lr: 5.000e-04, eta: 0:38:18, time: 0.566, data_time: 0.005, memory: 5992, i_loss: 0.1566, mask_loss: 0.0055, loss_rpn_cls: 0.0097, loss_rpn_bbox: 0.0358, loss_cls: 0.1163, acc: 95.0918, loss_bbox: 0.2562, loss: 0.5801
2023-01-20 20:48:27,972 - mmdet - INFO - Saving checkpoint at 9 epochs
2023-01-20 20:49:43,189 - mmdet - INFO - Evaluating bbox...
2023-01-20 20:49:46,576 - mmdet - INFO - 
+----------+--------+----------+--------+----------+--------+
| category | AP50   | category | AP50   | category | AP50   |
+----------+--------+----------+--------+----------+--------+
| car      | 0.9591 | person   | 0.9315 | bicycle  | 0.9449 |
| dog      | 0.9208 | None     | None   | None     | None   |
+----------+--------+----------+--------+----------+--------+
2023-01-20 20:49:46,576 - mmdet - INFO - 
+----------+--------+----------+--------+----------+--------+
| category | AP     | category | AP     | category | AP     |
+----------+--------+----------+--------+----------+--------+
| car      | 0.6644 | person   | 0.5366 | bicycle  | 0.5210 |
| dog      | 0.5207 | None     | None   | None     | None   |
+----------+--------+----------+--------+----------+--------+
2023-01-20 20:49:46,593 - mmdet - INFO - Exp name: faster_rcnn_r50_fpn_tinet_flir2.py
2023-01-20 20:49:46,593 - mmdet - INFO - Epoch(val) [9][1013]	bbox_mAP: 0.5607, bbox_mAP_50: 0.9391, bbox_mAP_75: 0.5995, bbox_mAP_s: 0.4396, bbox_mAP_m: 0.6209, bbox_mAP_l: 0.7310, bbox_mAP_copypaste: 0.5607 0.9391 0.5995 0.4396 0.6209 0.7310
2023-01-20 20:50:20,218 - mmdet - INFO - Epoch [10][50/1286]	lr: 5.000e-04, eta: 0:37:22, time: 0.672, data_time: 0.051, memory: 5992, i_loss: 0.1566, mask_loss: 0.0064, loss_rpn_cls: 0.0090, loss_rpn_bbox: 0.0347, loss_cls: 0.1166, acc: 95.0664, loss_bbox: 0.2520, loss: 0.5754
2023-01-20 20:50:51,497 - mmdet - INFO - Epoch [10][100/1286]	lr: 5.000e-04, eta: 0:36:53, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0054, loss_rpn_cls: 0.0077, loss_rpn_bbox: 0.0336, loss_cls: 0.1149, acc: 95.0967, loss_bbox: 0.2526, loss: 0.5709
2023-01-20 20:51:22,672 - mmdet - INFO - Epoch [10][150/1286]	lr: 5.000e-04, eta: 0:36:24, time: 0.623, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0055, loss_rpn_cls: 0.0087, loss_rpn_bbox: 0.0319, loss_cls: 0.1128, acc: 95.1406, loss_bbox: 0.2404, loss: 0.5559
2023-01-20 20:51:53,959 - mmdet - INFO - Epoch [10][200/1286]	lr: 5.000e-04, eta: 0:35:55, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0059, loss_rpn_cls: 0.0084, loss_rpn_bbox: 0.0345, loss_cls: 0.1193, acc: 94.9287, loss_bbox: 0.2546, loss: 0.5793
2023-01-20 20:52:25,241 - mmdet - INFO - Epoch [10][250/1286]	lr: 5.000e-04, eta: 0:35:26, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0056, loss_rpn_cls: 0.0106, loss_rpn_bbox: 0.0376, loss_cls: 0.1200, acc: 94.9023, loss_bbox: 0.2541, loss: 0.5847
2023-01-20 20:52:56,501 - mmdet - INFO - Epoch [10][300/1286]	lr: 5.000e-04, eta: 0:34:57, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0052, loss_rpn_cls: 0.0081, loss_rpn_bbox: 0.0333, loss_cls: 0.1095, acc: 95.3984, loss_bbox: 0.2350, loss: 0.5478
2023-01-20 20:53:27,674 - mmdet - INFO - Epoch [10][350/1286]	lr: 5.000e-04, eta: 0:34:28, time: 0.623, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0057, loss_rpn_cls: 0.0070, loss_rpn_bbox: 0.0369, loss_cls: 0.1198, acc: 94.9912, loss_bbox: 0.2590, loss: 0.5851
2023-01-20 20:53:58,906 - mmdet - INFO - Epoch [10][400/1286]	lr: 5.000e-04, eta: 0:33:59, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0052, loss_rpn_cls: 0.0085, loss_rpn_bbox: 0.0319, loss_cls: 0.1114, acc: 95.2930, loss_bbox: 0.2404, loss: 0.5540
2023-01-20 20:54:30,164 - mmdet - INFO - Epoch [10][450/1286]	lr: 5.000e-04, eta: 0:33:30, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1578, mask_loss: 0.0061, loss_rpn_cls: 0.0094, loss_rpn_bbox: 0.0347, loss_cls: 0.1210, acc: 94.8564, loss_bbox: 0.2545, loss: 0.5834
2023-01-20 20:55:01,487 - mmdet - INFO - Epoch [10][500/1286]	lr: 5.000e-04, eta: 0:33:01, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0055, loss_rpn_cls: 0.0073, loss_rpn_bbox: 0.0356, loss_cls: 0.1174, acc: 94.9541, loss_bbox: 0.2501, loss: 0.5726
2023-01-20 20:55:32,765 - mmdet - INFO - Epoch [10][550/1286]	lr: 5.000e-04, eta: 0:32:32, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1591, mask_loss: 0.0058, loss_rpn_cls: 0.0077, loss_rpn_bbox: 0.0336, loss_cls: 0.1124, acc: 95.2676, loss_bbox: 0.2423, loss: 0.5609
2023-01-20 20:56:04,021 - mmdet - INFO - Epoch [10][600/1286]	lr: 5.000e-04, eta: 0:32:03, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0064, loss_rpn_cls: 0.0089, loss_rpn_bbox: 0.0352, loss_cls: 0.1228, acc: 94.8047, loss_bbox: 0.2625, loss: 0.5924
2023-01-20 20:56:35,283 - mmdet - INFO - Epoch [10][650/1286]	lr: 5.000e-04, eta: 0:31:34, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0062, loss_rpn_cls: 0.0076, loss_rpn_bbox: 0.0299, loss_cls: 0.1095, acc: 95.4238, loss_bbox: 0.2310, loss: 0.5409
2023-01-20 20:57:06,560 - mmdet - INFO - Epoch [10][700/1286]	lr: 5.000e-04, eta: 0:31:05, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1568, mask_loss: 0.0061, loss_rpn_cls: 0.0089, loss_rpn_bbox: 0.0363, loss_cls: 0.1142, acc: 95.2422, loss_bbox: 0.2522, loss: 0.5745
2023-01-20 20:57:37,785 - mmdet - INFO - Epoch [10][750/1286]	lr: 5.000e-04, eta: 0:30:36, time: 0.624, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0058, loss_rpn_cls: 0.0097, loss_rpn_bbox: 0.0358, loss_cls: 0.1262, acc: 94.7090, loss_bbox: 0.2672, loss: 0.6013
2023-01-20 20:58:08,982 - mmdet - INFO - Epoch [10][800/1286]	lr: 5.000e-04, eta: 0:30:07, time: 0.624, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0058, loss_rpn_cls: 0.0075, loss_rpn_bbox: 0.0310, loss_cls: 0.1119, acc: 95.3369, loss_bbox: 0.2416, loss: 0.5545
2023-01-20 20:58:40,188 - mmdet - INFO - Epoch [10][850/1286]	lr: 5.000e-04, eta: 0:29:38, time: 0.624, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0059, loss_rpn_cls: 0.0083, loss_rpn_bbox: 0.0345, loss_cls: 0.1118, acc: 95.2412, loss_bbox: 0.2460, loss: 0.5632
2023-01-20 20:59:11,408 - mmdet - INFO - Epoch [10][900/1286]	lr: 5.000e-04, eta: 0:29:08, time: 0.624, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0054, loss_rpn_cls: 0.0079, loss_rpn_bbox: 0.0308, loss_cls: 0.1103, acc: 95.3506, loss_bbox: 0.2375, loss: 0.5485
2023-01-20 20:59:42,781 - mmdet - INFO - Epoch [10][950/1286]	lr: 5.000e-04, eta: 0:28:39, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0058, loss_rpn_cls: 0.0096, loss_rpn_bbox: 0.0357, loss_cls: 0.1187, acc: 94.9570, loss_bbox: 0.2512, loss: 0.5776
2023-01-20 21:00:14,055 - mmdet - INFO - Epoch [10][1000/1286]	lr: 5.000e-04, eta: 0:28:10, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0054, loss_rpn_cls: 0.0085, loss_rpn_bbox: 0.0332, loss_cls: 0.1160, acc: 95.1162, loss_bbox: 0.2492, loss: 0.5690
2023-01-20 21:00:45,377 - mmdet - INFO - Epoch [10][1050/1286]	lr: 5.000e-04, eta: 0:27:41, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0056, loss_rpn_cls: 0.0077, loss_rpn_bbox: 0.0319, loss_cls: 0.1091, acc: 95.4268, loss_bbox: 0.2384, loss: 0.5493
2023-01-20 21:01:16,596 - mmdet - INFO - Epoch [10][1100/1286]	lr: 5.000e-04, eta: 0:27:12, time: 0.624, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0063, loss_rpn_cls: 0.0093, loss_rpn_bbox: 0.0347, loss_cls: 0.1189, acc: 95.0312, loss_bbox: 0.2503, loss: 0.5761
2023-01-20 21:01:48,037 - mmdet - INFO - Epoch [10][1150/1286]	lr: 5.000e-04, eta: 0:26:42, time: 0.629, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0062, loss_rpn_cls: 0.0079, loss_rpn_bbox: 0.0358, loss_cls: 0.1227, acc: 94.8418, loss_bbox: 0.2637, loss: 0.5929
2023-01-20 21:02:14,505 - mmdet - INFO - Epoch [10][1200/1286]	lr: 5.000e-04, eta: 0:26:12, time: 0.529, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0059, loss_rpn_cls: 0.0078, loss_rpn_bbox: 0.0342, loss_cls: 0.1207, acc: 94.9248, loss_bbox: 0.2570, loss: 0.5823
2023-01-20 21:02:42,316 - mmdet - INFO - Epoch [10][1250/1286]	lr: 5.000e-04, eta: 0:25:42, time: 0.556, data_time: 0.005, memory: 5992, i_loss: 0.1566, mask_loss: 0.0060, loss_rpn_cls: 0.0088, loss_rpn_bbox: 0.0379, loss_cls: 0.1276, acc: 94.7295, loss_bbox: 0.2579, loss: 0.5948
2023-01-20 21:03:31,497 - mmdet - INFO - Epoch [11][50/1286]	lr: 5.000e-04, eta: 0:24:47, time: 0.582, data_time: 0.050, memory: 5992, i_loss: 0.1566, mask_loss: 0.0055, loss_rpn_cls: 0.0071, loss_rpn_bbox: 0.0307, loss_cls: 0.1090, acc: 95.5000, loss_bbox: 0.2382, loss: 0.5471
2023-01-20 21:03:59,172 - mmdet - INFO - Epoch [11][100/1286]	lr: 5.000e-04, eta: 0:24:17, time: 0.553, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0055, loss_rpn_cls: 0.0080, loss_rpn_bbox: 0.0339, loss_cls: 0.1146, acc: 95.1279, loss_bbox: 0.2493, loss: 0.5679
2023-01-20 21:04:30,384 - mmdet - INFO - Epoch [11][150/1286]	lr: 5.000e-04, eta: 0:23:48, time: 0.624, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0061, loss_rpn_cls: 0.0085, loss_rpn_bbox: 0.0313, loss_cls: 0.1128, acc: 95.1582, loss_bbox: 0.2454, loss: 0.5609
2023-01-20 21:05:01,701 - mmdet - INFO - Epoch [11][200/1286]	lr: 5.000e-04, eta: 0:23:19, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0058, loss_rpn_cls: 0.0076, loss_rpn_bbox: 0.0325, loss_cls: 0.1130, acc: 95.2207, loss_bbox: 0.2400, loss: 0.5555
2023-01-20 21:05:32,906 - mmdet - INFO - Epoch [11][250/1286]	lr: 5.000e-04, eta: 0:22:50, time: 0.624, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0056, loss_rpn_cls: 0.0097, loss_rpn_bbox: 0.0376, loss_cls: 0.1194, acc: 95.0088, loss_bbox: 0.2483, loss: 0.5772
2023-01-20 21:06:03,799 - mmdet - INFO - Epoch [11][300/1286]	lr: 5.000e-04, eta: 0:22:20, time: 0.618, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0058, loss_rpn_cls: 0.0082, loss_rpn_bbox: 0.0339, loss_cls: 0.1194, acc: 94.9336, loss_bbox: 0.2561, loss: 0.5800
2023-01-20 21:06:35,066 - mmdet - INFO - Epoch [11][350/1286]	lr: 5.000e-04, eta: 0:21:51, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0051, loss_rpn_cls: 0.0079, loss_rpn_bbox: 0.0350, loss_cls: 0.1153, acc: 95.1465, loss_bbox: 0.2506, loss: 0.5706
2023-01-20 21:07:06,408 - mmdet - INFO - Epoch [11][400/1286]	lr: 5.000e-04, eta: 0:21:22, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0055, loss_rpn_cls: 0.0074, loss_rpn_bbox: 0.0355, loss_cls: 0.1184, acc: 95.0547, loss_bbox: 0.2511, loss: 0.5745
2023-01-20 21:07:37,626 - mmdet - INFO - Epoch [11][450/1286]	lr: 5.000e-04, eta: 0:20:53, time: 0.624, data_time: 0.006, memory: 5992, i_loss: 0.1591, mask_loss: 0.0060, loss_rpn_cls: 0.0085, loss_rpn_bbox: 0.0351, loss_cls: 0.1162, acc: 95.0146, loss_bbox: 0.2481, loss: 0.5729
2023-01-20 21:08:08,870 - mmdet - INFO - Epoch [11][500/1286]	lr: 5.000e-04, eta: 0:20:24, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0052, loss_rpn_cls: 0.0072, loss_rpn_bbox: 0.0312, loss_cls: 0.1042, acc: 95.5400, loss_bbox: 0.2308, loss: 0.5353
2023-01-20 21:08:40,109 - mmdet - INFO - Epoch [11][550/1286]	lr: 5.000e-04, eta: 0:19:54, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0054, loss_rpn_cls: 0.0085, loss_rpn_bbox: 0.0339, loss_cls: 0.1097, acc: 95.3662, loss_bbox: 0.2355, loss: 0.5497
2023-01-20 21:09:11,365 - mmdet - INFO - Epoch [11][600/1286]	lr: 5.000e-04, eta: 0:19:25, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0056, loss_rpn_cls: 0.0083, loss_rpn_bbox: 0.0309, loss_cls: 0.1078, acc: 95.4180, loss_bbox: 0.2371, loss: 0.5464
2023-01-20 21:09:42,680 - mmdet - INFO - Epoch [11][650/1286]	lr: 5.000e-04, eta: 0:18:56, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0060, loss_rpn_cls: 0.0082, loss_rpn_bbox: 0.0358, loss_cls: 0.1174, acc: 95.0527, loss_bbox: 0.2552, loss: 0.5792
2023-01-20 21:10:14,019 - mmdet - INFO - Epoch [11][700/1286]	lr: 5.000e-04, eta: 0:18:26, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0061, loss_rpn_cls: 0.0083, loss_rpn_bbox: 0.0312, loss_cls: 0.1066, acc: 95.4521, loss_bbox: 0.2334, loss: 0.5422
2023-01-20 21:10:45,221 - mmdet - INFO - Epoch [11][750/1286]	lr: 5.000e-04, eta: 0:17:57, time: 0.624, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0061, loss_rpn_cls: 0.0090, loss_rpn_bbox: 0.0376, loss_cls: 0.1215, acc: 94.8506, loss_bbox: 0.2560, loss: 0.5869
2023-01-20 21:11:16,490 - mmdet - INFO - Epoch [11][800/1286]	lr: 5.000e-04, eta: 0:17:28, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0062, loss_rpn_cls: 0.0087, loss_rpn_bbox: 0.0334, loss_cls: 0.1109, acc: 95.3682, loss_bbox: 0.2396, loss: 0.5554
2023-01-20 21:11:47,792 - mmdet - INFO - Epoch [11][850/1286]	lr: 5.000e-04, eta: 0:16:58, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0054, loss_rpn_cls: 0.0077, loss_rpn_bbox: 0.0344, loss_cls: 0.1137, acc: 95.1875, loss_bbox: 0.2495, loss: 0.5673
2023-01-20 21:12:19,104 - mmdet - INFO - Epoch [11][900/1286]	lr: 5.000e-04, eta: 0:16:29, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0061, loss_rpn_cls: 0.0081, loss_rpn_bbox: 0.0358, loss_cls: 0.1127, acc: 95.2539, loss_bbox: 0.2437, loss: 0.5631
2023-01-20 21:12:50,428 - mmdet - INFO - Epoch [11][950/1286]	lr: 5.000e-04, eta: 0:16:00, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0062, loss_rpn_cls: 0.0081, loss_rpn_bbox: 0.0329, loss_cls: 0.1140, acc: 95.1719, loss_bbox: 0.2499, loss: 0.5678
2023-01-20 21:13:21,749 - mmdet - INFO - Epoch [11][1000/1286]	lr: 5.000e-04, eta: 0:15:30, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0059, loss_rpn_cls: 0.0081, loss_rpn_bbox: 0.0343, loss_cls: 0.1140, acc: 95.1689, loss_bbox: 0.2502, loss: 0.5692
2023-01-20 21:13:53,093 - mmdet - INFO - Epoch [11][1050/1286]	lr: 5.000e-04, eta: 0:15:01, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0053, loss_rpn_cls: 0.0079, loss_rpn_bbox: 0.0328, loss_cls: 0.1059, acc: 95.5176, loss_bbox: 0.2317, loss: 0.5403
2023-01-20 21:14:24,397 - mmdet - INFO - Epoch [11][1100/1286]	lr: 5.000e-04, eta: 0:14:31, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0052, loss_rpn_cls: 0.0073, loss_rpn_bbox: 0.0309, loss_cls: 0.1031, acc: 95.5605, loss_bbox: 0.2255, loss: 0.5287
2023-01-20 21:14:55,650 - mmdet - INFO - Epoch [11][1150/1286]	lr: 5.000e-04, eta: 0:14:02, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0054, loss_rpn_cls: 0.0091, loss_rpn_bbox: 0.0380, loss_cls: 0.1252, acc: 94.7080, loss_bbox: 0.2593, loss: 0.5937
2023-01-20 21:15:26,845 - mmdet - INFO - Epoch [11][1200/1286]	lr: 5.000e-04, eta: 0:13:32, time: 0.624, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0066, loss_rpn_cls: 0.0086, loss_rpn_bbox: 0.0337, loss_cls: 0.1111, acc: 95.3506, loss_bbox: 0.2413, loss: 0.5580
2023-01-20 21:15:58,052 - mmdet - INFO - Epoch [11][1250/1286]	lr: 5.000e-04, eta: 0:13:03, time: 0.624, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0061, loss_rpn_cls: 0.0074, loss_rpn_bbox: 0.0339, loss_cls: 0.1125, acc: 95.2568, loss_bbox: 0.2449, loss: 0.5615
2023-01-20 21:16:54,283 - mmdet - INFO - Epoch [12][50/1286]	lr: 5.000e-05, eta: 0:12:10, time: 0.671, data_time: 0.051, memory: 5992, i_loss: 0.1567, mask_loss: 0.0053, loss_rpn_cls: 0.0071, loss_rpn_bbox: 0.0295, loss_cls: 0.1023, acc: 95.7295, loss_bbox: 0.2279, loss: 0.5288
2023-01-20 21:17:18,805 - mmdet - INFO - Epoch [12][100/1286]	lr: 5.000e-05, eta: 0:11:40, time: 0.490, data_time: 0.005, memory: 5992, i_loss: 0.1566, mask_loss: 0.0059, loss_rpn_cls: 0.0065, loss_rpn_bbox: 0.0299, loss_cls: 0.1034, acc: 95.5410, loss_bbox: 0.2254, loss: 0.5278
2023-01-20 21:17:47,510 - mmdet - INFO - Epoch [12][150/1286]	lr: 5.000e-05, eta: 0:11:11, time: 0.574, data_time: 0.005, memory: 5992, i_loss: 0.1566, mask_loss: 0.0055, loss_rpn_cls: 0.0083, loss_rpn_bbox: 0.0341, loss_cls: 0.1073, acc: 95.4639, loss_bbox: 0.2337, loss: 0.5456
2023-01-20 21:18:15,595 - mmdet - INFO - Epoch [12][200/1286]	lr: 5.000e-05, eta: 0:10:41, time: 0.562, data_time: 0.005, memory: 5992, i_loss: 0.1566, mask_loss: 0.0061, loss_rpn_cls: 0.0077, loss_rpn_bbox: 0.0336, loss_cls: 0.1076, acc: 95.3799, loss_bbox: 0.2387, loss: 0.5504
2023-01-20 21:18:41,495 - mmdet - INFO - Epoch [12][250/1286]	lr: 5.000e-05, eta: 0:10:11, time: 0.518, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0051, loss_rpn_cls: 0.0081, loss_rpn_bbox: 0.0315, loss_cls: 0.1045, acc: 95.5283, loss_bbox: 0.2344, loss: 0.5401
2023-01-20 21:19:12,712 - mmdet - INFO - Epoch [12][300/1286]	lr: 5.000e-05, eta: 0:09:42, time: 0.624, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0051, loss_rpn_cls: 0.0065, loss_rpn_bbox: 0.0306, loss_cls: 0.0988, acc: 95.7969, loss_bbox: 0.2192, loss: 0.5168
2023-01-20 21:19:44,035 - mmdet - INFO - Epoch [12][350/1286]	lr: 5.000e-05, eta: 0:09:13, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0062, loss_rpn_cls: 0.0094, loss_rpn_bbox: 0.0373, loss_cls: 0.1186, acc: 94.9951, loss_bbox: 0.2551, loss: 0.5833
2023-01-20 21:20:15,216 - mmdet - INFO - Epoch [12][400/1286]	lr: 5.000e-05, eta: 0:08:43, time: 0.624, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0056, loss_rpn_cls: 0.0078, loss_rpn_bbox: 0.0322, loss_cls: 0.1131, acc: 95.2783, loss_bbox: 0.2388, loss: 0.5541
2023-01-20 21:20:46,449 - mmdet - INFO - Epoch [12][450/1286]	lr: 5.000e-05, eta: 0:08:14, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0050, loss_rpn_cls: 0.0087, loss_rpn_bbox: 0.0305, loss_cls: 0.1088, acc: 95.4287, loss_bbox: 0.2355, loss: 0.5452
2023-01-20 21:21:17,706 - mmdet - INFO - Epoch [12][500/1286]	lr: 5.000e-05, eta: 0:07:44, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1591, mask_loss: 0.0054, loss_rpn_cls: 0.0082, loss_rpn_bbox: 0.0342, loss_cls: 0.1104, acc: 95.2686, loss_bbox: 0.2355, loss: 0.5529
2023-01-20 21:21:49,026 - mmdet - INFO - Epoch [12][550/1286]	lr: 5.000e-05, eta: 0:07:15, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0058, loss_rpn_cls: 0.0076, loss_rpn_bbox: 0.0358, loss_cls: 0.1133, acc: 95.3096, loss_bbox: 0.2439, loss: 0.5631
2023-01-20 21:22:20,282 - mmdet - INFO - Epoch [12][600/1286]	lr: 5.000e-05, eta: 0:06:45, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0056, loss_rpn_cls: 0.0079, loss_rpn_bbox: 0.0341, loss_cls: 0.1142, acc: 95.0762, loss_bbox: 0.2438, loss: 0.5622
2023-01-20 21:22:51,601 - mmdet - INFO - Epoch [12][650/1286]	lr: 5.000e-05, eta: 0:06:16, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0060, loss_rpn_cls: 0.0071, loss_rpn_bbox: 0.0316, loss_cls: 0.1115, acc: 95.1953, loss_bbox: 0.2372, loss: 0.5501
2023-01-20 21:23:22,893 - mmdet - INFO - Epoch [12][700/1286]	lr: 5.000e-05, eta: 0:05:46, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0056, loss_rpn_cls: 0.0083, loss_rpn_bbox: 0.0335, loss_cls: 0.1114, acc: 95.3223, loss_bbox: 0.2419, loss: 0.5573
2023-01-20 21:23:54,363 - mmdet - INFO - Epoch [12][750/1286]	lr: 5.000e-05, eta: 0:05:17, time: 0.629, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0064, loss_rpn_cls: 0.0074, loss_rpn_bbox: 0.0355, loss_cls: 0.1152, acc: 95.1299, loss_bbox: 0.2488, loss: 0.5700
2023-01-20 21:24:25,667 - mmdet - INFO - Epoch [12][800/1286]	lr: 5.000e-05, eta: 0:04:47, time: 0.626, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0059, loss_rpn_cls: 0.0093, loss_rpn_bbox: 0.0356, loss_cls: 0.1170, acc: 95.0195, loss_bbox: 0.2504, loss: 0.5748
2023-01-20 21:24:56,918 - mmdet - INFO - Epoch [12][850/1286]	lr: 5.000e-05, eta: 0:04:18, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0060, loss_rpn_cls: 0.0078, loss_rpn_bbox: 0.0324, loss_cls: 0.1120, acc: 95.3320, loss_bbox: 0.2450, loss: 0.5598
2023-01-20 21:25:28,159 - mmdet - INFO - Epoch [12][900/1286]	lr: 5.000e-05, eta: 0:03:48, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0057, loss_rpn_cls: 0.0064, loss_rpn_bbox: 0.0303, loss_cls: 0.1022, acc: 95.7871, loss_bbox: 0.2199, loss: 0.5210
2023-01-20 21:25:59,423 - mmdet - INFO - Epoch [12][950/1286]	lr: 5.000e-05, eta: 0:03:18, time: 0.625, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0055, loss_rpn_cls: 0.0080, loss_rpn_bbox: 0.0372, loss_cls: 0.1237, acc: 94.8125, loss_bbox: 0.2594, loss: 0.5906
2023-01-20 21:26:30,790 - mmdet - INFO - Epoch [12][1000/1286]	lr: 5.000e-05, eta: 0:02:49, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0054, loss_rpn_cls: 0.0083, loss_rpn_bbox: 0.0364, loss_cls: 0.1149, acc: 95.1377, loss_bbox: 0.2481, loss: 0.5697
2023-01-20 21:27:02,239 - mmdet - INFO - Epoch [12][1050/1286]	lr: 5.000e-05, eta: 0:02:19, time: 0.629, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0059, loss_rpn_cls: 0.0079, loss_rpn_bbox: 0.0345, loss_cls: 0.1135, acc: 95.1455, loss_bbox: 0.2427, loss: 0.5611
2023-01-20 21:27:33,405 - mmdet - INFO - Epoch [12][1100/1286]	lr: 5.000e-05, eta: 0:01:50, time: 0.623, data_time: 0.006, memory: 5992, i_loss: 0.1567, mask_loss: 0.0056, loss_rpn_cls: 0.0074, loss_rpn_bbox: 0.0318, loss_cls: 0.1072, acc: 95.5410, loss_bbox: 0.2310, loss: 0.5398
2023-01-20 21:28:04,769 - mmdet - INFO - Epoch [12][1150/1286]	lr: 5.000e-05, eta: 0:01:20, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0054, loss_rpn_cls: 0.0078, loss_rpn_bbox: 0.0324, loss_cls: 0.1165, acc: 95.0439, loss_bbox: 0.2518, loss: 0.5705
2023-01-20 21:28:36,096 - mmdet - INFO - Epoch [12][1200/1286]	lr: 5.000e-05, eta: 0:00:50, time: 0.627, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0062, loss_rpn_cls: 0.0072, loss_rpn_bbox: 0.0332, loss_cls: 0.1186, acc: 94.9824, loss_bbox: 0.2497, loss: 0.5715
2023-01-20 21:29:07,274 - mmdet - INFO - Epoch [12][1250/1286]	lr: 5.000e-05, eta: 0:00:21, time: 0.624, data_time: 0.006, memory: 5992, i_loss: 0.1566, mask_loss: 0.0052, loss_rpn_cls: 0.0074, loss_rpn_bbox: 0.0310, loss_cls: 0.1106, acc: 95.4033, loss_bbox: 0.2387, loss: 0.5495
2023-01-20 21:29:29,808 - mmdet - INFO - Saving checkpoint at 12 epochs
2023-01-20 21:30:48,231 - mmdet - INFO - Evaluating bbox...
2023-01-20 21:30:50,917 - mmdet - INFO - 
+----------+--------+----------+--------+----------+--------+
| category | AP50   | category | AP50   | category | AP50   |
+----------+--------+----------+--------+----------+--------+
| car      | 0.9634 | person   | 0.9379 | bicycle  | 0.9563 |
| dog      | 0.9208 | None     | None   | None     | None   |
+----------+--------+----------+--------+----------+--------+
2023-01-20 21:30:50,917 - mmdet - INFO - 
+----------+--------+----------+--------+----------+--------+
| category | AP     | category | AP     | category | AP     |
+----------+--------+----------+--------+----------+--------+
| car      | 0.6790 | person   | 0.5509 | bicycle  | 0.5585 |
| dog      | 0.5607 | None     | None   | None     | None   |
+----------+--------+----------+--------+----------+--------+
2023-01-20 21:30:50,933 - mmdet - INFO - Exp name: faster_rcnn_r50_fpn_tinet_flir2.py
2023-01-20 21:30:50,934 - mmdet - INFO - Epoch(val) [12][1013]	bbox_mAP: 0.5873, bbox_mAP_50: 0.9446, bbox_mAP_75: 0.6783, bbox_mAP_s: 0.4615, bbox_mAP_m: 0.6482, bbox_mAP_l: 0.7622, bbox_mAP_copypaste: 0.5873 0.9446 0.6783 0.4615 0.6482 0.7622
